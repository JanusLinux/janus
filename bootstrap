#!/bin/bash

set -e

msg() {
	local msg=$(echo $1 | tr -s / /)
	printf "\e[1m\e[32m==>\e[0m $msg\n"
}

die() {
	local msg=$(echo $1 | tr -s / /)
	printf "\e[1m\e[31m==!\e[0m $msg\n"
	exit 1
}

check_for_root() {
	if [[ $EUID -ne 0 ]]; then
		die "'bootstrap' script must be run as root"
	fi
}

initdb() {
	local dir="$@"
	for dbdir in $dir; do
		msg "Database initialization in '"$dbdir"'"
		mkdir -p $dbdir/var/lib/pacman
	done
}

pkgstagezero() {
	local pkg="$@"
	for pkgstageone in $pkg; do
		msg "Emerging '"$pkgstageone"' package"
		cd $TCREPO/$pkgstageone
		makepkg --config $BUILD/host-makepkg.conf -dd -c -C -f --skipinteg
		pacman -U $PACKAGES/host-$pkgstageone-*.pkg.tar.xz -dd --root $TOOLS --force --noconfirm
		rm -rf $PACKAGES/host-$pkgstageone-*.pkg.tar.xz
	done
}

pkgstageone() {
	local pkg="$@"
	for pkgstageone in $pkg; do
		msg "Emerging '"$pkgstageone"' package"
		cd $CHREPO/$pkgstageone
		makepkg --config $BUILD/chroot-makepkg.conf -dd -c -C -f --skipinteg
		pacman -U $PACKAGES/chroot-$pkgstageone-*.pkg.tar.xz -dd --arch $BARCH --root "$ROOTFS" --noconfirm
		rm -rf $PACKAGES/chroot-$pkgstageone-*.pkg.tar.xz
	done
}

pkgstageoneb() {
	local pkg="$@"
	for pkgstageone in $pkg; do
		msg "Emerging '"$pkgstageone"' package"
		cd $CHREPO/$pkgstageone
		makepkg --config $BUILD/host-makepkg.conf -dd -c -C -f --skipinteg
		pacman -U $PACKAGES/chroot-$pkgstageone-*.pkg.tar.xz -dd --arch $BARCH --root "$ROOTFS" --noconfirm
		rm -rf $PACKAGES/chroot-$pkgstageone-*.pkg.tar.xz
	done
}

pkgstageonec() {
	local pkg="$@"
	for pkgstageone in $pkg; do
		msg "Emerging '"$pkgstageone"' package"
		cd $REPO/$pkgstageone
		makepkg --config $BUILD/host-makepkg.conf -dd -c -C -f
		pacman -U $PACKAGES/$pkgstageone-*.pkg.tar.xz -dd --arch $BARCH --root "$ROOTFS" --noconfirm --noscriptlet
	done
}

setup_architecture() {
	case $BARCH in
		x86_64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="x86_64-linux-musl"
			export XKARCH="x86_64"
			export GCCOPTS="--with-arch=x86-64 --with-tune=generic"
			export BINUTILSOPTS="--enable-targets=x86_64-pep"
			;;
		x86)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="i686-linux-musl"
			export XKARCH="i386"
			export GCCOPTS="--with-arch=i686 --with-tune=generic"
			export BINUTILSOPTS=''
			;;
		arm64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="aarch64-linux-musl"
			export XKARCH="arm64"
			export GCCOPTS="--with-arch=armv8-a --enable-fix-cortex-a53-835769 --enable-fix-cortex-a53-843419"
			export BINUTILSOPTS=''
			;;
		armv7l)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="armv7l-linux-musleabihf"
			export XKARCH="arm"
			export GCCOPTS="--with-arch=armv7-a --with-float=hard --with-fpu=vfpv3-d16"
			export BINUTILSOPTS=''
			;;
		armv5tel)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="armv5tel-linux-musleabi"
			export XKARCH="arm"
			export GCCOPTS="--with-arch=armv5te --with-float=soft"
			export BINUTILSOPTS=''
			;;
		mips64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="mips64-linux-musl"
			export XKARCH="mips"
			export GCCOPTS="--with-arch=mips3 --with-tune=mips64 --with-mips-plt --with-float=soft --with-abi=64 --with-linker-hash-style=sysv"
			export BINUTILSOPTS=''
			;;
		mips)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="mips-linux-musl"
			export XKARCH="mips"
			export GCCOPTS="--with-arch=mips32 --with-mips-plt --with-float=soft --with-abi=32 --with-linker-hash-style=sysv"
			export BINUTILSOPTS=''
			;;
		ppc64le)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="powerpc64le-linux-musl"
			export XKARCH="powerpc"
			export GCCOPTS="--with-abi=elfv2 --enable-secureplt --enable-decimal-float=no --enable-targets=powerpcle-linux"
			export BINUTILSOPTS=''
			;;
		ppc64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="powerpc64-linux-musl"
			export XKARCH="powerpc"
			export GCCOPTS="--with-abi=elfv2 --enable-secureplt --enable-decimal-float=no"
			export BINUTILSOPTS=''
			;;
		ppc)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="powerpc-linux-musl"
			export XKARCH="powerpc"
			export GCCOPTS="--enable-secureplt --enable-decimal-float=no"
			export BINUTILSOPTS=''
			;;
		*)
			die "Architecture is not set or is not supported by 'bootstrap' script"
	esac

	msg "Using configuration for '"$BARCH"' platform"
}

setup_environment() {
	msg "Setting up the build environment"

	export CWD="$(pwd)"
	export BUILD="$CWD/OUT.$BARCH"
	export SOURCES="$BUILD/sources"
	export PACKAGES="$BUILD/packages"
	export ROOTFS="$BUILD/rootfs"
	export TOOLS="$BUILD/tools"
	export ISODIR="$BUILD/isodir"
	export ISOBUILD="$BUILD/isobuild"
	export LIVEOS="$BUILD/liveos"
	export TARBALLDIR="$BUILD/tarballdir"
	export EFIBUILD="$BUILD/efibuild"
	export REPO="$CWD/packages"
	export TCREPO="$CWD/toolchain"
	export CHREPO="$CWD/chroot"
	export BSPREPO="$CWD/bsp"
	export SCRIPTS="$CWD/scripts"

	export LC_ALL="POSIX"
	export PATH="$TOOLS/bin:$PATH"
	export HOSTCC="gcc"
	export HOSTCXX="g++"

	if [ -z $MKJOBS ]; then
		export MKJOBS="$(expr $(nproc) + 1)"
	fi

	export MKOPTS="-j$MKJOBS"

	export CFLAGS="-g0 -Os -s -fomit-frame-pointer"
	export CXXFLAGS="$CFLAGS"
}

build_environment() {
	msg "Building the build environment"

	rm -rf $BUILD
	mkdir -p $BUILD $SOURCES $PACKAGES "$ROOTFS" $TOOLS $LIVEOS $EFIBUILD $ISOBUILD $ISODIR

	initdb $TOOLS "$ROOTFS"

	cp -a $TCREPO/makepkg.conf $BUILD/host-makepkg.conf
	cp -a $CHREPO/makepkg.conf $BUILD/chroot-makepkg.conf

	for files in $BUILD/host-makepkg.conf $BUILD/chroot-makepkg.conf; do
		sed -i $files \
			-e "s|@CARCH[@]|$BARCH|g" \
			-e "s|@CHOST[@]|$XTARGET|g" \
			-e "s|@CFLAGS[@]|$CFLAGS|g" \
			-e "s|@CXXFLAGS[@]|$CXXFLAGS|g" \
			-e "s|@MKOPTS[@]|$MKOPTS|g" \
			-e "s|@PKGS[@]|$PACKAGES|g" \
			-e "s|@SOURCES[@]|$SOURCES|g" \
			-e "s|@ROOTFS[@]|"$ROOTFS"|g" \
			-e "s|@TOOLS[@]|$TOOLS|g" \
			-e "s|@XHOST[@]|$XHOST|g" \
			-e "s|@XTARGET[@]|$XTARGET|g" \
			-e "s|@XKARCH[@]|$XKARCH|g" \
			-e "s|@GCCOPTS[@]|$GCCOPTS|g" \
			-e "s|@BINUTILSOPTS[@]|$BINUTILSOPTS|g" \
			-e "s|@HOSTCC[@]|$HOSTCC|g" \
			-e "s|@HOSTCXX[@]|$HOSTCXX|g" \
			-e "s|@PATH[@]|$PATH|g" \
			-e "s|@LC_ALL[@]|$LC_ALL|g"
	done
}

build_toolchain() {
	msg "Building cross-toolchain for '"$BARCH"' platform"

	pkgstageonec base-files
	pkgstagezero file
	pkgstagezero pkgconf
	pkgstagezero gettext-tiny
	pkgstagezero texinfo
	pkgstagezero m4
	pkgstagezero bison
	pkgstagezero byacc
	pkgstagezero flex
	pkgstageoneb linux-api-headers
	pkgstageoneb fortify-headers
	pkgstagezero binutils
	pkgstagezero gcc-static
	pkgstageoneb musl
	pkgstagezero gcc

	msg "Cleaning up"
	find "$TOOLS" -type f | xargs file 2>/dev/null | grep "libtool library file" | cut -f 1 -d : | xargs rm -rf 2>/dev/null || true
}

build_chrootchain() {
	msg "Building chroot-toolchain for '"$BARCH"' platform"
	mkdir -p ""$ROOTFS""/storage/{sources,packages,repository,scripts,bsp}

	for package in musl-tools libz binutils gcc netbsd-curses bash \
			bzip2 diffutils file gettext-tiny make ed patch \
			perl texinfo xz lzip busybox openssl curl libarchive \
			fakeroot pacman; do
		pkgstageone $package
	done
}

build_symlinks() {
	for file in awk bash cat dd echo env file grep ln ls pwd rm sed sh stty install perl curl fakeroot du sed; do
		ln -sf /tools/bin/${file} "$ROOTFS"/bin
	done

	ln -sf /tools/lib/libgcc_s.so "$ROOTFS"/lib
	ln -sf /tools/lib/libgcc_s.so.1 "$ROOTFS"/lib
	ln -sf /tools/lib/libstdc++.so "$ROOTFS"/lib
	ln -sf /tools/lib/libstdc++.so.6 "$ROOTFS"/lib
	ln -sf /tools/lib/libstdc++.a "$ROOTFS"/lib
	ln -sf /tools/lib/libssp_nonshared.a "$ROOTFS"/lib
}

binfmt_helper() {
	case $BARCH in
		x86_64)
			export QEMUARCH="x86_64"
			;;
		x86)
			export QEMUARCH="i386"
			;;
		arm64)
			export QEMUARCH="aarch64"
			;;
		armv7l|armv5tel)
			export QEMUARCH="arm"
			;;
		mips64)
			export QEMUARCH="mips64"
			;;
		mips)
			export QEMUARCH="mips"
			;;
		ppc64le)
			export QEMUARCH="ppc64le"
			;;
		ppc64)
			export QEMUARCH="ppc64"
			;;
		ppc)
			export QEMUARCH="ppc"
			;;
		*)
			die "Architecture is not set or is not supported by 'bootstrap' script"
	esac

	cp "$(which qemu-$QEMUARCH-static)" "$ROOTFS"/bin
}

enter_chroot() {
	msg "Entering chroot environment"
	set +e

	if [ "$BINFMT" = "1" ]; then
		binfmt_helper
	fi

	mount --bind "$SOURCES"   "$ROOTFS"/storage/sources
	mount --bind "$PACKAGES"  "$ROOTFS"/storage/packages
	mount --bind "$REPO"      "$ROOTFS"/storage/repository
	mount --bind "$BSPREPO"   "$ROOTFS"/storage/bsp
	mount --bind "$SCRIPTS"   "$ROOTFS"/storage/scripts

	mount --bind /proc "$ROOTFS"/proc
	mount --bind /sys  "$ROOTFS"/sys
	mount --bind /dev  "$ROOTFS"/dev
	mount --bind /tmp  "$ROOTFS"/tmp

	chroot "$ROOTFS" /bin/env -i \
		TERM="$TERM" \
		LD_LIBRARY_PATH="/lib:/local/lib:/tools/lib" \
		PATH="/storage/scripts:/local/sbin:/local/bin:/bin:/tools/bin" \
		BARCH="$BARCH" \
		/tools/bin/ash

	umount -l "$ROOTFS"/storage/sources
	umount -l "$ROOTFS"/storage/packages
	umount -l "$ROOTFS"/storage/repository
	umount -l "$ROOTFS"/storage/bsp
	umount -l "$ROOTFS"/storage/scripts

	umount -l "$ROOTFS"/proc
	umount -l "$ROOTFS"/sys
	umount -l "$ROOTFS"/dev
	umount -l "$ROOTFS"/tmp

	set -e
}

COMMAND="$1"
STAGE="$2"

case "$COMMAND" in
	stage)
		case $STAGE in
			0)
				check_for_root
				setup_architecture
				setup_environment
				build_environment
				build_toolchain
				;;
			1)
				check_for_root
				setup_architecture
				setup_environment
				build_environment
				build_toolchain
				build_chrootchain
				build_symlinks
				;;
			*)
				die "Stage number was not selected or is not supported"
		esac
		;;
	enter-chroot)
		check_for_root
		setup_architecture
		setup_environment
		enter_chroot
		;;
	usage|*)
		msg "In development!"
esac

exit 0

