#!/usr/bin/env bash

die() { printf "\033[1;31m::\033[0m %s\n" "$@"; exit 1; }

generate_initramfs() {
	mkdir -p "$INITRAMFS"/usr/lib/hydra/db

	packages="base-files netbase musl tzdata zlib xz lz4 zstd bzip2 file \
		ncurses readline gmp mpfr pcre libcap-ng audit cracklib libtirpc \
		pam libpwquality attr acl libcap shadow grep sed psmisc mksh bash \
		net-tools expat libressl nettle ca-certificates lzip libarchive lzo \
		kmod gawk findutils 9base lobase sbase ubase less dialog gzip libmnl libnftnl \
		libnfnetlink libnetfilter_conntrack libnl libpcap iptables iproute2 kbd tar nano \
		libseccomp libgpg-error libgcrypt libunistring libidn2 libtasn1 p11-kit gnutls \
		iputils procps-ng util-linux libaio lvm2 popt json-c argon2 cryptsetup hwids systemd \
		dbus-broker dbus e2fsprogs btrfs-progs dosfstools run-parts wireless_tools wpa_supplicant \
		gptfdisk wget libevent links dropbear linux"

	hydra em -c "$BUILD"/target.config -r "$INITRAMFS" -wDSH $packages

	pushd "$INITRAMFS"
		rm -rf usr/lib/pkgconfig usr/include usr/share/cracklib usr/share/dict usr/share/misc
		rm -rf usr/share/man usr/share/zsh usr/share/nano etc/nanorc usr/share/aclocal usr/share/bash-completion
		rm -rf usr/lib/modules/*/kernel/drivers/gpu usr/lib/modules/*/kernel/drivers/gpu
		rm -rf usr/lib/modules/*/kernel/drivers/input usr/lib/modules/*/kernel/drivers/hid
		rm -rf usr/lib/modules/*/kernel/drivers/hwmon usr/lib/modules/*/kernel/drivers/nfs
		rm -rf usr/lib/modules/*/kernel/drivers/isdn usr/lib/modules/*/kernel/drivers/bluetooth
		rm -rf usr/lib/modules/*/kernel/drivers/leds usr/lib/modules/*/kernel/drivers/gpio
		rm -rf usr/lib/modules/*/kernel/drivers/misc usr/lib/modules/*/kernel/drivers/video
		rm -rf usr/lib/modules/*/kernel/net/netfilter usr/lib/modules/*/kernel/net/sched
		rm -rf usr/lib/modules/*/kernel/sound usr/lib/modules/*/kernel/fs usr/lib/modules/*/kernel/drivers/mfd
		rm -rf usr/lib/modules/*/kernel/drivers/edac usr/lib/modules/*/kernel/infiniband

		for bins in lz4 lz4c lz4cat unlz4 pzstd unzstd zstd zstdcat zstdgrep zstdless zstdmt \
				bunzip2 bzcat bzdiff bzgrep bzip2 bzip2recover bzmore lzcat lzcmp lzdiff \
				lzegrep lzfgrep lzgrep lzless lzma lzmadec lzmainfo lzmore unlzma xzcat xzcmp \
				xzdec xzdiff xzegrep xzfgrep xzgrep xzless xzmore bzless bzfgrep bzegrep \
				bzcmp openssl nl* file; do
			rm -rf usr/bin/$bins
		done

		mkdir -p etc/systemd/system/getty@tty1.service.d/
		cat > etc/systemd/system/getty@tty1.service.d/override.conf <<-EOF
			[Service]
			ExecStart=
			ExecStart=-/usr/bin/agetty --autologin root %I $TERM
		EOF

		systemctl -q --root "$INITRAMFS" enable dropbear.service
		systemd-firstboot --root="$INITRAMFS" --keymap=us --timezone=America/New_York --hostname=live --root-password=anon

		ln -sf usr/lib/systemd/systemd init

		cp "$TOOLS"/$XTARGET/lib/libgcc_s.so.1 usr/lib/
		cp "$TOOLS"/$XTARGET/lib/libstdc++.so.6 usr/lib/

		mv boot/vmlinuz-ataraxia "$ISODIR"/seiba/seiba
		rm -rf boot

		find . -name "*.a" -print0 | xargs -0 rm -rf

		find . | cpio -H newc -o | zstd -12 > "$ISODIR"/seiba/seiba.zst
	popd
}

make_iso_x86() {
	mkdir -p "$ISODIR"/boot/grub "$ISODIR"/boot/isolinux "$ISODIR"/efi/boot

	grub_mod="all_video disk part_gpt part_msdos linux normal configfile search search_label efi_gop fat iso9660 cat echo ls test true help gzio multiboot2 efi_uga"

	case $BARCH in
		x86_64)
			format="x86_64-efi"
			efi="bootx64.efi"
			;;
		i686)
			format="i386-efi"
			efi="bootia32.efi"
			;;
	esac

	cat > "$GRUBEFICFG" <<- EOF
		search --no-floppy --set=root --label "ataraxialinux"
		set prefix=(\$root)/boot/grub
	EOF

	cat > "$ISODIR"/boot/grub/grub.cfg <<- EOF
		menuentry "Ataraxia Linux" {
			linux	/seiba/seiba rw quiet enforcing=0
			initrd	/seiba/seiba.zst
		}
	EOF

	"$BUILD"/tools/bin/grub-mkimage \
		--config="$GRUBEFICFG" \
		--prefix="/boot/grub" \
		--output="$ISODIR"/efi/boot/$efi \
		--format="$format" \
		--compress="xz" \
		$grub_mod

	mformat -i "$ISODIR"/boot/grub/efi.img -C -f 1440 ::
	mcopy -i "$ISODIR"/boot/grub/efi.img -s "$ISODIR"/efi ::

	cp -a "$STUFF"/mklive/isolinux.bin "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/ldlinux.c32 "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/libcom32.c32 "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/vesamenu.c32 "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/libutil.c32 "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/chain.c32 "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/background.png "$ISODIR"/boot/isolinux/background.png

	cat > "$ISODIR"/boot/isolinux/isolinux.cfg <<- EOF
		UI vesamenu.c32
		PROMPT 0
		TIMEOUT 100
		ONTIMEOUT ataraxialinux
		MENU TABMSG Press ENTER to boot or TAB to edit a menu entry
		MENU AUTOBOOT BIOS default device boot in # second{,s}...
		MENU BACKGROUND /boot/isolinux/background.png
		MENU WIDTH 78
		MENU MARGIN 1
		MENU ROWS 4
		MENU VSHIFT 2
		MENU TIMEOUTROW 8
		MENU TABMSGROW 2
		MENU CMDLINEROW 11
		MENU HELPMSGROW 16
		MENU HELPMSGENDROW 29
		MENU COLOR title        * #9000FF *
		MENU COLOR border       * #00000000 #00000000 none
		MENU COLOR sel          * #ffffffff #9000FF *
		LABEL ataraxialinux
		MENU LABEL Ataraxia Linux
		KERNEL /seiba/seiba rw quiet enforcing=0
		APPEND initrd=/seiba/seiba.zst
	EOF

	xorriso -as mkisofs \
		-isohybrid-mbr "$STUFF"/mklive/isohdpfx.bin \
		-iso-level 2 \
		-c boot/isolinux/boot.cat \
		-b boot/isolinux/isolinux.bin \
		-no-emul-boot \
		-boot-load-size 4 \
		-boot-info-table \
		-eltorito-alt-boot \
		-e boot/grub/efi.img \
		-no-emul-boot \
		-isohybrid-gpt-basdat \
		-A 'ataraxialinux' -V 'ataraxialinux' \
		-o "$BUILD"/ataraxialinux-$BARCH.iso \
		"$ISODIR"/
}

make_iso_arm() {
	mkdir -p "$ISODIR"/boot/grub "$ISODIR"/efi/boot

	grub_mod="all_video disk part_gpt part_msdos linux normal configfile search search_label efi_gop fat iso9660 cat echo ls test true help gzio"

	case $BARCH in
		aarch64)
			format="arm64-efi"
			efi="bootaa64.efi"
			;;
		armv7hl|armv6hl)
			format="arm-efi"
			efi="bootarm.efi"
			;;
	esac

	cat > "$GRUBEFICFG" <<- EOF
		search --no-floppy --set=root --label "ataraxialinux"
		set prefix=(\$root)/boot/grub
	EOF

	cat > "$ISODIR"/boot/grub/grub.cfg <<- EOF
		menuentry "Ataraxia Linux" {
			linux	/seiba/seiba rw quiet enforcing=0
			initrd	/seiba/seiba.zst
		}
	EOF

	"$BUILD"/tools/bin/grub-mkimage \
		--config="$GRUBEFICFG" \
		--prefix="/boot/grub" \
		--output="$ISODIR"/efi/boot/$efi \
		--format="$format" \
		--compress="xz" \
		$grub_mod

	mformat -i "$ISODIR"/boot/grub/efi.img -C -f 1440 ::
	mcopy -i "$ISODIR"/boot/grub/efi.img -s "$ISODIR"/efi ::

	xorriso -as mkisofs \
		-isohybrid-mbr "$STUFF"/mklive/isohdpfx.bin \
		-iso-level 2 \
		-c boot/grub/boot.cat \
		-e boot/grub/efi.img \
		-no-emul-boot \
		-isohybrid-gpt-basdat \
		-A 'ataraxialinux' -V 'ataraxialinux' \
		-o "$BUILD"/ataraxialinux-$BARCH.iso \
		"$ISODIR"/
}

make_iso_ppc() {
	mkdir -p "$TOOLS"/share/grub "$ISODIR"/boot/grub

	[ ! -f "$TOOLS/share/grub/unicode.pf2" ] && cp "$STUFF"/mklive/unicode.pf2 "$TOOLS"/share/grub/unicode.pf2

	cat > "$ISODIR"/boot/grub/grub.cfg <<- EOF
		menuentry "Ataraxia Linux" {
			linux	/seiba/seiba root=/dev/ram0 rw quiet enforcing=0
			initrd	/seiba/seiba.zst
		}
	EOF

	"$BUILD"/tools/bin/grub-mkrescue \
		--output "$BUILD"/ataraxialinux-$BARCH.iso "$ISODIR"/ \
		-A 'ataraxialinux' -V 'ataraxialinux'
}

main() {
	if [ ! -f "$BUILD/.core-built" ]; then
		die "Build core system first"
	fi

	ISODIR="$BUILD/rootcd"
	INITRAMFS="$BUILD/initramfs"
	GRUBEFICFG="$BUILD/efi.cfg"

	rm -rf "$ISODIR" "$INITRAMFS" "$GRUBEFICFG"
	mkdir -p "$ISODIR/seiba" "$INITRAMFS"

	source "$BUILD/target.config"
	generate_initramfs

	case $BARCH in
		x86_64|i686)
			make_iso_x86
			;;
		aarch64|armv7hl|armv6hl)
			make_iso_arm
			;;
		ppc64le|ppc64)
			make_iso_ppc
			;;
	esac
}
