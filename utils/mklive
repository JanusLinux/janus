#!/usr/bin/env bash

msg() { printf "\033[1;34m::\033[0m %s\n" "$@"; }
die() { printf "\033[1;31m::\033[0m %s\n" "$@"; exit 1; }

install_liveos() {
	mkdir -p "$LIVEOS"/usr/lib/hydra/db

	case $BARCH in
		x86_64|i686|aarch64|armv7hl|armv6hl)
				EXTRAPKG="grub"
				;;
		ppc64le|ppc64)
				EXTRAPKG="grub"
				;;
	esac

	core="base-files netbase linux-headers musl tzdata man-pages musl-tools \
		gettext-tiny zlib xz lz4 zstd bzip2 file ncurses readline m4 bison flex bc \
		gmp mpfr mpc binutils gcc pkgconf pcre libcap-ng audit cracklib libtirpc pam libpwquality \
		attr acl libcap shadow grep sed psmisc mksh bash slibtool net-tools gdbm db53 sqlite \
		expat libffi libressl nettle python perl ca-certificates autoconf automake lzip libarchive lzo \
		kmod libuargp libelf gawk findutils 9base lobase sbase ubase less mandoc gzip ncompress \
		libmnl libnftnl libnfnetlink libnetfilter_conntrack libnl libpcap iptables iproute2 kbd \
		samurai python-setuptools meson make patch tar cpio texinfo nano procps-ng gperf libseccomp \
		libgpg-error libgcrypt libunistring libidn2 libtasn1 p11-kit gnutls iputils  util-linux \
		libaio lvm2 popt json-c argon2 cryptsetup hwids systemd dbus-broker dbus e2fsprogs btrfs-progs \
		run-parts libssh2 nghttp2 c-ares heimdal brotli curl hpkg linux"

	packages="linux-firmware squashfs-tools alsa-utils dnf earlyoom wireless_tools wpa_supplicant font-adobe-source-han-sans-jp-fonts mozc $EXTRAPKG"

	if [ "$DESKTOP" != "sway" ]; then
		case $BARCH in
			x86_64|i686)
				packages="$packages xorg-server xinit xf86-input-libinput xf86-video-{fbdev,vesa,ati,amdgpu,intel,nouveau,vmware}"
				;;
			*)
				packages="$packages xorg-server xinit xf86-input-libinput xf86-video-{fbdev,vesa,ati,amdgpu,nouveau}"
				;;
		esac
	fi

	case $DESKTOP in
		gnome) packages="$packages gnome" ;;
		gnome-core) packages="$packages gnome-core" ;;
		xfce) packages="$packages xfce lightdm network-manager-applet" ;;
		xfce-core) packages="$packages xfce-core lightdm network-manager-applet" ;;
		mate) packages="$packages mate lightdm network-manager-applet" ;;
		mate-core) packages="$packages mate-core lightdm network-manager-applet" ;;
		budgie) packages="$packages budgie-desktop gvfs nautilus gnome-terminal lightdm" ;;
		sway) packages="$packages sway networkmanager" ;;
		*) die "You haven't specified desktop environment/windows manager or it's not supported" ;;
	esac

	if [ "$BARCH" == "x86_64" ] || [ "$BARCH" == "i686" ] || [ "$BARCH" == "aarch64" ]; then
		if [ "$MOZILLA" != "no" ]; then
			packages="$packages firefox"
		else
			packages="$packages netsurf"
		fi
	else
		packages="$packages netsurf"
	fi

	msg "Installing packages"
	hydra em -c "$BUILD"/target.config -r "$LIVEOS" -DSH $core
	hydra em -c "$BUILD"/target.config -r "$LIVEOS" $packages

	msg "Configuring system"
	pushd "$LIVEOS"
		cp boot/vmlinuz-ataraxia "$ISODIR"/seiba/seiba
	popd
	cp "$BUILD"/initrd "$ISODIR"/seiba/seiba.zst
	mv "$LIVEOS"/etc/motd "$LIVEOS"/etc/motd.old

	cat > "$LIVEOS"/etc/motd <<-EOF
		Welcome to Ataraxia Linux live medium!

		To start install, type "ataraxia-install" and press ENTER.
		Don't forget to partition your disk! You can use cfdisk or fdisk for that.
		To show help run the same command without arguments.

		If you want to start X edit "~/.xinitrc", type "startx" and press ENTER.
	EOF

	pushd "$LIVEOS/usr/bin"
		curl -C - -L -O https://raw.githubusercontent.com/ataraxialinux/installer/1d9290097c9df423ea1db539f95e92b69924119345/ataraxia-install
		chmod +x ataraxia-install
	popd

	systemctl -q --root "$LIVEOS" enable NetworkManager earlyoom
	systemd-firstboot --root="$LIVEOS" --keymap=us --timezone=America/New_York --hostname=live

	# RELABEL HERE

	msg "Building squashfs"
	pushd "$LIVEOS"
		mksquashfs . "$ISODIR"/seiba/seiba.sfs -comp zstd -b 128K || exit 1
	popd
}

make_iso_x86() {
	mkdir -p "$ISODIR"/boot/grub "$ISODIR"/boot/isolinux "$ISODIR"/efi/boot

	grub_mod="all_video disk part_gpt part_msdos linux normal configfile search search_label efi_gop fat iso9660 cat echo ls test true help gzio multiboot2 efi_uga"

	case $BARCH in
		x86_64)
			format="x86_64-efi"
			efi="bootx64.efi"
			;;
		i686)
			format="i386-efi"
			efi="bootia32.efi"
			;;
	esac

	cat > "$GRUBEFICFG" <<- EOF
		search --no-floppy --set=root --label "ataraxialinux"
		set prefix=(\$root)/boot/grub
	EOF

	cat > "$ISODIR"/boot/grub/grub.cfg <<- EOF
		menuentry "Ataraxia Linux" {
			linux	/seiba/seiba rw quiet enforcing=0
			initrd	/seiba/seiba.zst
		}
	EOF

	"$BUILD"/tools/bin/grub-mkimage \
		--config="$GRUBEFICFG" \
		--prefix="/boot/grub" \
		--output="$ISODIR"/efi/boot/$efi \
		--format="$format" \
		--compress="xz" \
		$grub_mod

	mformat -i "$ISODIR"/boot/grub/efi.img -C -f 1440 ::
	mcopy -i "$ISODIR"/boot/grub/efi.img -s "$ISODIR"/efi ::

	cp -a "$STUFF"/mklive/isolinux.bin "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/ldlinux.c32 "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/libcom32.c32 "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/vesamenu.c32 "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/libutil.c32 "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/chain.c32 "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/background.png "$ISODIR"/boot/isolinux/background.png

	cat > "$ISODIR"/boot/isolinux/isolinux.cfg <<- EOF
		UI vesamenu.c32
		PROMPT 0
		TIMEOUT 100
		ONTIMEOUT ataraxialinux
		MENU TABMSG Press ENTER to boot or TAB to edit a menu entry
		MENU AUTOBOOT BIOS default device boot in # second{,s}...
		MENU BACKGROUND /boot/isolinux/background.png
		MENU WIDTH 78
		MENU MARGIN 1
		MENU ROWS 4
		MENU VSHIFT 2
		MENU TIMEOUTROW 8
		MENU TABMSGROW 2
		MENU CMDLINEROW 11
		MENU HELPMSGROW 16
		MENU HELPMSGENDROW 29
		MENU COLOR title        * #9000FF *
		MENU COLOR border       * #00000000 #00000000 none
		MENU COLOR sel          * #ffffffff #9000FF *
		LABEL ataraxialinux
		MENU LABEL Ataraxia Linux
		KERNEL /seiba/seiba rw quiet enforcing=0
		APPEND initrd=/seiba/seiba.zst
	EOF

	xorriso -as mkisofs \
		-isohybrid-mbr "$STUFF"/mklive/isohdpfx.bin \
		-iso-level 2 \
		-c boot/isolinux/boot.cat \
		-b boot/isolinux/isolinux.bin \
		-no-emul-boot \
		-boot-load-size 4 \
		-boot-info-table \
		-eltorito-alt-boot \
		-e boot/grub/efi.img \
		-no-emul-boot \
		-isohybrid-gpt-basdat \
		-A 'ataraxialinux' -V 'ataraxialinux' \
		-o "$BUILD"/ataraxialinux-$DESKTOP-$BARCH.iso \
		"$ISODIR"/

	implantisomd5 "$BUILD"/ataraxialinux-$BARCH.iso
}

make_iso_arm() {
	mkdir -p "$ISODIR"/boot/grub "$ISODIR"/efi/boot

	grub_mod="all_video disk part_gpt part_msdos linux normal configfile search search_label efi_gop fat iso9660 cat echo ls test true help gzio"

	case $BARCH in
		aarch64)
			format="arm64-efi"
			efi="bootaa64.efi"
			;;
		armv7hl|armv6hl)
			format="arm-efi"
			efi="bootarm.efi"
			;;
	esac

	cat > "$GRUBEFICFG" <<- EOF
		search --no-floppy --set=root --label "ataraxialinux"
		set prefix=(\$root)/boot/grub
	EOF

	cat > "$ISODIR"/boot/grub/grub.cfg <<- EOF
		menuentry "Ataraxia Linux" {
			linux	/seiba/seiba rw quiet enforcing=0
			initrd	/seiba/seiba.zst
		}
	EOF

	"$BUILD"/tools/bin/grub-mkimage \
		--config="$GRUBEFICFG" \
		--prefix="/boot/grub" \
		--output="$ISODIR"/efi/boot/$efi \
		--format="$format" \
		--compress="xz" \
		$grub_mod

	mformat -i "$ISODIR"/boot/grub/efi.img -C -f 1440 ::
	mcopy -i "$ISODIR"/boot/grub/efi.img -s "$ISODIR"/efi ::

	xorriso -as mkisofs \
		-isohybrid-mbr "$STUFF"/mklive/isohdpfx.bin \
		-iso-level 2 \
		-c boot/grub/boot.cat \
		-e boot/grub/efi.img \
		-no-emul-boot \
		-isohybrid-gpt-basdat \
		-A 'ataraxialinux' -V 'ataraxialinux' \
		-o "$BUILD"/ataraxialinux-$BARCH.iso \
		"$ISODIR"/

	implantisomd5 "$BUILD"/ataraxialinux-$BARCH.iso
}

make_iso_ppc() {
	mkdir -p "$TOOLS"/share/grub "$ISODIR"/boot/grub

	[ ! -f "$TOOLS/share/grub/unicode.pf2" ] && cp "$STUFF"/mklive/unicode.pf2 "$TOOLS"/share/grub/unicode.pf2

	cat > "$ISODIR"/boot/grub/grub.cfg <<- EOF
		menuentry "Ataraxia Linux" {
			linux	/seiba/seiba root=/dev/ram0 rw quiet enforcing=0
			initrd	/seiba/seiba.zst
		}
	EOF

	"$BUILD"/tools/bin/grub-mkrescue \
		--output "$BUILD"/ataraxialinux-$BARCH.iso "$ISODIR"/ \
		-A 'ataraxialinux' -V 'ataraxialinux'

	implantisomd5 "$BUILD"/ataraxialinux-$BARCH.iso
}

main() {
	if [ ! -f "$BUILD/.core-built" ]; then
		die "Build core system first"
	fi

	ISODIR="$BUILD/rootcd"
	LIVEOS="$BUILD/initramfs"
	TMPBUILD="$BUILD/tmp"
	GRUBEFICFG="$BUILD/efi.cfg"

	rm -rf "$ISODIR" "$LIVEOS" "$TMPBUILD" "$GRUBEFICFG"
	mkdir -p "$ISODIR/seiba" "$LIVEOS" "$TMPBUILD"

	source "$BUILD/target.config"
	install_liveos

	case $BARCH in
		x86_64|i686)
			make_iso_x86
			;;
		aarch64|armv7hl|armv6hl)
			make_iso_arm
			;;
		ppc64le|ppc64)
			make_iso_ppc
			;;
	esac
}
