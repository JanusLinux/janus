#!/usr/bin/env bash

msg() { printf "\033[1;34m::\033[0m %s\n" "$@"; }
die() { printf "\033[1;31m::\033[0m %s\n" "$@"; exit 1; }

install_liveos() {
	case $BARCH in
		x86_64|i686|aarch64|armv7hl|armv6hl)
				EXTRAPKG="gnu-efi"
				;;
	esac

	core="base-files netbase linux-headers musl tzdata man-pages musl-tools gettext-tiny \
		zlib xz lz4 zstd bzip2 file ncurses readline m4 bison flex bc gmp mpfr mpc binutils gcc \
		ccache pkgconf pcre libcap-ng audit cracklib pam libpwquality attr acl libcap shadow grep sed \
		psmisc mksh bash slibtool inetutils net-tools gdbm db sqlite expat libffi libressl nettle python perl ca-certificates \
		autoconf automake lzip libarchive lzo kmod libuargp libelf gawk findutils 9base lobase sbase ubase less \
		mandoc gzip ncompress iproute2 kbd samurai python-setuptools meson make patch tar cpio nano $EXTRAPKG libseccomp procps-ng gperf \
		util-linux libaio lvm2 popt json-c argon2 cryptsetup systemd dbus e2fsprogs btrfs-progs hwids run-parts libssh2 nghttp2 \
		heimdal curl popt rpm neko linux"

	packages="linux-firmware parted squashfs-tools alsa-utils dnf earlyoom"

	if [ "$DESKTOP" != "sway" ]; then
		packages="$packages xorg-server xinit xf86-input-libinput xf86-video-{fbdev,vesa,ati,amdgpu,intel,nouveau,vmware}"
	fi

	case $BARCH in
		x86_64|i686|aarch64|armv7hl|armv6hl) packages="$packages grub efibootmgr" ;;
	esac

	case $DESKTOP in
		gnome) packages="$packages gnome" ;;
		xfce) packages="$packages xfce lightdm network-manager-applet" ;;
		mate) packages="$packages mate-core gvfs lightdm network-manager-applet" ;;
		budgie) packages="$packages budgie-desktop gvfs nautilus gnome-terminal lightdm" ;;
		sway) packages="$packages sway networkmanager" ;;
		*) die "You haven't specified desktop environment/windows manager or it's not supported" ;;
	esac

	msg "Installing packages"
	neko em -c "$BUILD"/target.config -m "$BUILD"/mask -r "$LIVEOS" -wdst $core
	neko em -c "$BUILD"/target.config -m "$BUILD"/mask -r "$LIVEOS" -w $packages

	msg "Configuring system"
	pushd "$LIVEOS"
		cp boot/vmlinuz-ataraxia "$ISODIR"/seiba/seiba
	popd
	cp "$BUILD"/initrd "$ISODIR"/seiba/seiba.zst
	mv "$LIVEOS"/etc/motd "$LIVEOS"/etc/motd.old

	cat > "$LIVEOS"/etc/motd <<-EOF
		Welcome to Ataraxia Linux live medium!

		To start install, type "ataraxia-installer" and press ENTER.

		If you want to start X edit "~/.xinitrc", type "startx" and press ENTER.
	EOF

	pushd "$LIVEOS/usr/bin"
		curl -C - -L -O https://raw.githubusercontent.com/ataraxialinux/installer/20200825/usr/bin/ataraxia-installer
		chmod +x ataraxia-installer
	popd

	msg "Building squashfs"
	pushd "$LIVEOS"
		mksquashfs . "$ISODIR"/seiba/seiba.sfs -comp zstd -b 128K || exit 1
	popd
}

make_iso_x86() {
	mkdir -p "$ISODIR"/boot/grub "$ISODIR"/boot/isolinux "$ISODIR"/efi/boot

	grub_mod="all_video disk part_gpt part_msdos linux normal configfile search search_label efi_gop fat iso9660 cat echo ls test true help gzio multiboot2 efi_uga"

	case $BARCH in
		x86_64)
			format="x86_64-efi"
			efi="bootx64.efi"
			;;
		i686)
			format="i386-efi"
			efi="bootia32.efi"
			;;
	esac

	cat > "$GRUBEFICFG" <<- EOF
		search --no-floppy --set=root --label "ataraxialinux"
		set prefix=(\$root)/boot/grub
	EOF

	cat > "$ISODIR"/boot/grub/grub.cfg <<- EOF
		menuentry "Ataraxia Linux" {
			linux	/seiba/seiba rw loglevel=4 live=1
			initrd	/seiba/seiba.zst
		}
	EOF

	"$BUILD"/tools/bin/grub-mkimage \
		--config="$GRUBEFICFG" \
		--prefix="/boot/grub" \
		--output="$ISODIR"/efi/boot/$efi \
		--format="$format" \
		--compress="xz" \
		$grub_mod

	mformat -i "$ISODIR"/boot/grub/efi.img -C -f 1440 ::
	mcopy -i "$ISODIR"/boot/grub/efi.img -s "$ISODIR"/efi ::

	cp -a "$STUFF"/mklive/isolinux.bin "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/ldlinux.c32 "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/libcom32.c32 "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/vesamenu.c32 "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/libutil.c32 "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/chain.c32 "$ISODIR"/boot/isolinux
	cp -a "$STUFF"/mklive/background.png "$ISODIR"/boot/isolinux/background.png

	cat > "$ISODIR"/boot/isolinux/isolinux.cfg <<- EOF
		UI vesamenu.c32
		PROMPT 0
		TIMEOUT 100
		ONTIMEOUT ataraxialinux
		MENU TABMSG Press ENTER to boot or TAB to edit a menu entry
		MENU AUTOBOOT BIOS default device boot in # second{,s}...
		MENU BACKGROUND /boot/isolinux/background.png
		MENU WIDTH 78
		MENU MARGIN 1
		MENU ROWS 4
		MENU VSHIFT 2
		MENU TIMEOUTROW 8
		MENU TABMSGROW 2
		MENU CMDLINEROW 11
		MENU HELPMSGROW 16
		MENU HELPMSGENDROW 29
		MENU COLOR title        * #9000FF *
		MENU COLOR border       * #00000000 #00000000 none
		MENU COLOR sel          * #ffffffff #9000FF *
		LABEL ataraxialinux
		MENU LABEL Ataraxia Linux
		KERNEL /seiba/seiba rw loglevel=4 live=1
		APPEND initrd=/seiba/seiba.zst
	EOF

	xorriso -as mkisofs \
		-isohybrid-mbr "$STUFF"/mklive/isohdpfx.bin \
		-iso-level 2 \
		-c boot/isolinux/boot.cat \
		-b boot/isolinux/isolinux.bin \
		-no-emul-boot \
		-boot-load-size 4 \
		-boot-info-table \
		-eltorito-alt-boot \
		-e boot/grub/efi.img \
		-no-emul-boot \
		-isohybrid-gpt-basdat \
		-A 'ataraxialinux' -V 'ataraxialinux' \
		-o "$BUILD"/ataraxialinux-$DESKTOP-$BARCH.iso \
		"$ISODIR"/
}

make_iso_arm() {
	mkdir -p "$ISODIR"/boot/grub "$ISODIR"/efi/boot

	grub_mod="all_video disk part_gpt part_msdos linux normal configfile search search_label efi_gop fat iso9660 cat echo ls test true help gzio multiboot2 efi_uga"

	case $BARCH in
		aarch64)
			format="arm64-efi"
			efi="bootaa64.efi"
			;;
		armv7hl|armv6hl)
			format="arm-efi"
			efi="bootarm.efi"
			;;
	esac

	cat > "$GRUBEFICFG" <<- EOF
		search --no-floppy --set=root --label "ataraxialinux"
		set prefix=(\$root)/boot/grub
	EOF

	cat > "$ISODIR"/boot/grub/grub.cfg <<- EOF
		menuentry "Ataraxia Linux" {
			linux	/seiba/seiba rw loglevel=4 live=1
			initrd	/seiba/seiba.zst
		}
	EOF

	"$BUILD"/tools/bin/grub-mkimage \
		--config="$GRUBEFICFG" \
		--prefix="/boot/grub" \
		--output="$ISODIR"/efi/boot/$efi \
		--format="$format" \
		--compress="xz" \
		$grub_mod

	mformat -i "$ISODIR"/boot/grub/efi.img -C -f 1440 ::
	mcopy -i "$ISODIR"/boot/grub/efi.img -s "$ISODIR"/efi ::

	xorriso -as mkisofs \
		-isohybrid-mbr "$STUFF"/mklive/isohdpfx.bin \
		-iso-level 2 \
		-c boot/grub/boot.cat \
		-e boot/grub/efi.img \
		-no-emul-boot \
		-isohybrid-gpt-basdat \
		-A 'ataraxialinux' -V 'ataraxialinux' \
		-o "$BUILD"/ataraxialinux-$BARCH.iso \
		"$ISODIR"/
}

make_iso_ppc() {
	mkdir -p "$TOOLS"/share/grub "$ISODIR"/boot/grub

	cat > "$ISODIR"/boot/grub/grub.cfg <<- EOF
		menuentry "Ataraxia Linux" {
			linux	/seiba/seiba rw loglevel=4 live=1
			initrd	/seiba/seiba.zst
		}
	EOF

	"$BUILD"/tools/bin/grub-mkrescue \
		--output "$BUILD"/ataraxialinux-$DESKTOP-$BARCH.iso "$ISODIR"/ \
		-A 'ataraxialinux' -V 'ataraxialinux'
}

main() {
	ISODIR="$BUILD/rootcd"
	LIVEOS="$BUILD/initramfs"
	TMPBUILD="$BUILD/tmp"
	GRUBEFICFG="$BUILD/efi.cfg"

	rm -rf "$ISODIR" "$LIVEOS" "$TMPBUILD" "$GRUBEFICFG"
	mkdir -p "$ISODIR/seiba" "$LIVEOS" "$TMPBUILD"

	source "$BUILD/target.config"
	install_liveos

	case $BARCH in
		x86_64|i686)
			make_iso_x86
			;;
		aarch64|armv7hl|armv6hl)
			make_iso_arm
			;;
		ppc64le|ppc64|ppc)
			make_iso_ppc
			;;
	esac
}
