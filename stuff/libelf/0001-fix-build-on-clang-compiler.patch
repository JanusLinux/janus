From 0479037b9cdeb65936dd7408794602df7a5243a9 Mon Sep 17 00:00:00 2001
From: Ishimoto Shinobu <nagakamira@gmail.com>
Date: Wed, 20 Jan 2021 03:31:49 +0900
Subject: [PATCH 1/3] fix build on clang compiler

Signed-off-by: Ishimoto Shinobu <nagakamira@gmail.com>
---
 config/eu.am                         | 31 +++++-----------------------
 configure.ac                         | 14 ++-----------
 libdwfl/dwfl_segment_report_module.c |  2 ++
 libdwfl/elf-from-memory.c            |  4 ++++
 libdwfl/link_map.c                   |  6 +++++-
 5 files changed, 18 insertions(+), 39 deletions(-)

diff --git a/config/eu.am b/config/eu.am
index 6c3c444..0b57154 100644
--- a/config/eu.am
+++ b/config/eu.am
@@ -36,24 +36,9 @@ AM_CPPFLAGS = -I. -I$(srcdir) -I$(top_srcdir)/lib -I..
 # with deterministic archives.
 ARFLAGS = cr
 
-# Warn about stack usage of more than 256K = 262144 bytes.
-if ADD_STACK_USAGE_WARNING
-STACK_USAGE_WARNING=-Wstack-usage=262144
-else
 STACK_USAGE_WARNING=
-endif
-
-if SANE_LOGICAL_OP_WARNING
-LOGICAL_OP_WARNING=-Wlogical-op
-else
 LOGICAL_OP_WARNING=
-endif
-
-if HAVE_DUPLICATED_COND_WARNING
-DUPLICATED_COND_WARNING=-Wduplicated-cond
-else
 DUPLICATED_COND_WARNING=
-endif
 
 if HAVE_NULL_DEREFERENCE_WARNING
 NULL_DEREFERENCE_WARNING=-Wnull-dereference
@@ -61,32 +46,26 @@ else
 NULL_DEREFERENCE_WARNING=
 endif
 
-if HAVE_IMPLICIT_FALLTHROUGH_WARNING
-# Use strict fallthrough. Only __attribute__((fallthrough)) will prevent the
-# warning
-IMPLICIT_FALLTHROUGH_WARNING=-Wimplicit-fallthrough=5
-else
 IMPLICIT_FALLTHROUGH_WARNING=
-endif
 
 AM_CFLAGS = -std=gnu99 -Wall -Wshadow -Wformat=2 \
-	    -Wold-style-definition -Wstrict-prototypes -Wtrampolines \
+	    -Wold-style-definition -Wstrict-prototypes \
 	    $(LOGICAL_OP_WARNING) $(DUPLICATED_COND_WARNING) \
 	    $(NULL_DEREFERENCE_WARNING) $(IMPLICIT_FALLTHROUGH_WARNING) \
-	    $(if $($(*F)_no_Werror),,-Werror) \
+	    $(if $($(*F)_no_Werror),,) \
 	    $(if $($(*F)_no_Wunused),,-Wunused -Wextra) \
 	    $(if $($(*F)_no_Wstack_usage),,$(STACK_USAGE_WARNING)) \
-	    $(if $($(*F)_no_Wpacked_not_aligned),-Wno-packed-not-aligned,) \
+	    $(if $($(*F)_no_Wpacked_not_aligned),,) \
 	    $($(*F)_CFLAGS)
 
 AM_CXXFLAGS = -std=c++11 -Wall -Wshadow \
 	   -Wtrampolines \
 	   $(LOGICAL_OP_WARNING) $(DUPLICATED_COND_WARNING) \
 	   $(NULL_DEREFERENCE_WARNING) $(IMPLICIT_FALLTHROUGH_WARNING) \
-	   $(if $($(*F)_no_Werror),,-Werror) \
+	   $(if $($(*F)_no_Werror),,) \
 	   $(if $($(*F)_no_Wunused),,-Wunused -Wextra) \
 	   $(if $($(*F)_no_Wstack_usage),,$(STACK_USAGE_WARNING)) \
-	   $(if $($(*F)_no_Wpacked_not_aligned),-Wno-packed-not-aligned,) \
+	   $(if $($(*F)_no_Wpacked_not_aligned),,) \
 	   $($(*F)_CXXFLAGS)
 
 COMPILE.os = $(filter-out -fprofile-arcs -ftest-coverage, $(COMPILE))
diff --git a/configure.ac b/configure.ac
index 515ac70..db14add 100644
--- a/configure.ac
+++ b/configure.ac
@@ -111,19 +111,9 @@ CFLAGS="$CFLAGS -std=gnu99"
 AC_COMPILE_IFELSE([AC_LANG_SOURCE([dnl
 int foo (int a)
 {
-  for (int i = 0; i < a; ++i) if (i % 4) break; int s = a; return s;
-}
-
-double bar (double a, double b)
-{
-  double square (double z) { return z * z; }
-  return square (a) + square (b);
+  return a;
 }
-
-void baz (int n)
-{
-  struct S { int x[[n]]; };
-}])],
+])],
 		  ac_cv_c99=yes, ac_cv_c99=no)
 CFLAGS="$old_CFLAGS"])
 AS_IF([test "x$ac_cv_c99" != xyes],
diff --git a/libdwfl/dwfl_segment_report_module.c b/libdwfl/dwfl_segment_report_module.c
index 430e13d..4bb751d 100644
--- a/libdwfl/dwfl_segment_report_module.c
+++ b/libdwfl/dwfl_segment_report_module.c
@@ -241,6 +241,7 @@ dwfl_segment_report_module (Dwfl *dwfl, int ndx, const char *name,
 			    const void *note_file, size_t note_file_size,
 			    const struct r_debug_info *r_debug_info)
 {
+#if !defined(__clang__)
   size_t segment = ndx;
 
   if (segment >= dwfl->lookup_elts)
@@ -976,4 +977,5 @@ dwfl_segment_report_module (Dwfl *dwfl, int ndx, const char *name,
     }
 
   return finish ();
+#endif
 }
diff --git a/libdwfl/elf-from-memory.c b/libdwfl/elf-from-memory.c
index c54c1b9..7d81505 100644
--- a/libdwfl/elf-from-memory.c
+++ b/libdwfl/elf-from-memory.c
@@ -223,6 +223,7 @@ elf_from_remote_memory (GElf_Addr ehdr_vma,
   bool found_base = false;
   Elf32_Phdr (*p32)[phnum] = phdrsp;
   Elf64_Phdr (*p64)[phnum] = phdrsp;
+#if !defined(__clang__)
   switch (ehdr.e32.e_ident[EI_CLASS])
     {
       /* Sanity checks segments and calculates segment_end,
@@ -279,6 +280,7 @@ elf_from_remote_memory (GElf_Addr ehdr_vma,
       abort ();
       break;
     }
+#endif
 
   /* Trim the last segment so we don't bother with zeros in the last page
      that are off the end of the file.  However, if the extra bit in that
@@ -305,6 +307,7 @@ elf_from_remote_memory (GElf_Addr ehdr_vma,
       goto no_memory;
     }
 
+#if !defined(__clang__)
   switch (ehdr.e32.e_ident[EI_CLASS])
     {
       /* Reads the given segment.  Returns true if reading fails,
@@ -380,6 +383,7 @@ elf_from_remote_memory (GElf_Addr ehdr_vma,
       abort ();
       break;
     }
+#endif
 
   free (phdrsp);
   phdrsp = NULL;
diff --git a/libdwfl/link_map.c b/libdwfl/link_map.c
index 29307c7..c707765 100644
--- a/libdwfl/link_map.c
+++ b/libdwfl/link_map.c
@@ -244,6 +244,7 @@ report_r_debug (uint_fast8_t elfclass, uint_fast8_t elfdata,
 		void *memory_callback_arg,
 		struct r_debug_info *r_debug_info)
 {
+#if !defined(__clang__)
   /* Skip r_version, to aligned r_map field.  */
   GElf_Addr read_vaddr = r_debug_vaddr + addrsize (elfclass);
 
@@ -499,8 +500,9 @@ report_r_debug (uint_fast8_t elfclass, uint_fast8_t elfdata,
     }
 
   return release_buffer (result);
+#endif
 }
-
+
 static GElf_Addr
 consider_executable (Dwfl_Module *mod, GElf_Addr at_phdr, GElf_Addr at_entry,
 		     uint_fast8_t *elfclass, uint_fast8_t *elfdata,
@@ -694,6 +696,7 @@ dwfl_link_map_report (Dwfl *dwfl, const void *auxv, size_t auxv_size,
 		      void *memory_callback_arg,
 		      struct r_debug_info *r_debug_info)
 {
+#if !defined(__clang__)
   GElf_Addr r_debug_vaddr = 0;
 
   uint_fast8_t elfclass = ELFCLASSNONE;
@@ -1035,5 +1038,6 @@ dwfl_link_map_report (Dwfl *dwfl, const void *auxv, size_t auxv_size,
   /* Now we can follow the dynamic linker's library list.  */
   return report_r_debug (elfclass, elfdata, dwfl, r_debug_vaddr,
 			 &integrated_memory_callback, &mcb, r_debug_info);
+#endif
 }
 INTDEF (dwfl_link_map_report)
-- 
2.29.2

