From 61265e8a46b47fc674c58d2635bba67a27f1b0ba Mon Sep 17 00:00:00 2001
From: Ishimoto Shinobu <nagakamira@gmail.com>
Date: Wed, 28 Apr 2021 09:35:39 -0700
Subject: [PATCH 4/4] gwp-asan: don't use backtrace and backtrace_symbols

Signed-off-by: Ishimoto Shinobu <nagakamira@gmail.com>
---
 lib/gwp_asan/optional/backtrace_linux_libc.cpp | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/lib/gwp_asan/optional/backtrace_linux_libc.cpp b/lib/gwp_asan/optional/backtrace_linux_libc.cpp
index ea8e72b..56782d6 100644
--- a/lib/gwp_asan/optional/backtrace_linux_libc.cpp
+++ b/lib/gwp_asan/optional/backtrace_linux_libc.cpp
@@ -7,7 +7,9 @@
 //===----------------------------------------------------------------------===//
 
 #include <assert.h>
+#if 0
 #include <execinfo.h>
+#endif
 #include <stddef.h>
 #include <stdint.h>
 #include <stdlib.h>
@@ -20,9 +22,11 @@
 
 namespace {
 size_t Backtrace(uintptr_t *TraceBuffer, size_t Size) {
+#if 0
   static_assert(sizeof(uintptr_t) == sizeof(void *), "uintptr_t is not void*");
 
   return backtrace(reinterpret_cast<void **>(TraceBuffer), Size);
+#endif
 }
 
 // We don't need any custom handling for the Segv backtrace - the libc unwinder
@@ -35,6 +39,7 @@ GWP_ASAN_ALWAYS_INLINE size_t SegvBacktrace(uintptr_t *TraceBuffer, size_t Size,
 
 static void PrintBacktrace(uintptr_t *Trace, size_t TraceLength,
                            gwp_asan::Printf_t Printf) {
+#if 0
   if (TraceLength == 0) {
     Printf("  <not found (does your allocator support backtracing?)>\n\n");
     return;
@@ -53,6 +58,7 @@ static void PrintBacktrace(uintptr_t *Trace, size_t TraceLength,
   Printf("\n");
   if (BacktraceSymbols)
     free(BacktraceSymbols);
+#endif
 }
 } // anonymous namespace
 
-- 
2.31.1

