# Description: The Linux kernel
# URL:         https://www.kernel.org/
# Maintainer:  nee-san, nagakamira at gmail dot com
# Depends on:  kmod bc libelf pigz libressl sbase

name=linux
version=4.20.11
release=1
source=("https://cdn.kernel.org/pub/linux/kernel/v4.x/$name-$version.tar.xz")
BOOTSTRAP=yes
NO_RUN_STRIP=1

yconfig() {
	while [ $# -ne 0 ]; do
		sed -i "s/.*CONFIG_$1\ .*/CONFIG_$1=y/" .config
		grep ^"CONFIG_$1=y" .config || echo "CONFIG_$1=y" >> .config
		shift 1
	done
}

mconfig() {
	while [ $# -ne 0 ]; do
		sed -i "s/.*CONFIG_$1\ .*/CONFIG_$1=m/" .config
		grep ^"CONFIG_$1=m" .config || echo "CONFIG_$1=m" >> .config
		shift 1
	done
}

nconfig() {
	while [ $# -ne 0 ]; do
		sed -i "s/.*CONFIG_$1\ .*/# CONFIG_$1  is not set/" .config
		grep ^"# CONFIG_$1  is not set" .config || echo "# CONFIG_$1  is not set" >> .config
		shift 1
	done
}

varconfig() {
	FUONE="$1"
	FUTWO="$2"

	./scripts/config --set-val "$FUONE" "$FUTWO"
}

strconfig() {
	FUONE="$1"
	FUTWO="$2"

	./scripts/config --set-str "$FUONE" "$FUTWO"
}

build() {
	case $BARCH in
		x86_64)
			export XKARCH="x86_64"
			export IMAGE="bzImage"
			export IMAGELOC="arch/x86/boot/bzImage"
			;;
		i686|i586)
			export XKARCH="i386"
			export IMAGE="bzImage"
			export IMAGELOC="arch/x86/boot/bzImage"
			;;
		aarch64)
			export XKARCH="arm64"
			export IMAGE="Image Image.gz dtbs"
			export IMAGELOC="arch/arm64/boot/Image"
			;;
		armv7l|armv5tel)
			export XKARCH="arm"
			export IMAGE="zImage dtbs"
			export IMAGELOC="arch/arm/boot/zImage"
			;;
		mips|mipsel)
			export XKARCH="mips"
			export IMAGE="vmlinux"
			export IMAGELOC="vmlinux"
			;;
		ppc64le|ppc64|ppc)
			export XKARCH="powerpc"
			export IMAGE="vmlinux"
			export IMAGELOC="vmlinux"
			;;
		riscv64|riscv32)
			export XKARCH="riscv"
			export IMAGE="vmlinux"
			export IMAGELOC="vmlinux"
			;;
		*)
			echo "Architecture is not set or is not supported by januslinux"
			exit 1
	esac

	case $BARCH in
		x86_64)
			export DEFCONFIG="x86_64_defconfig"
			;;
		i686|i586)
			export DEFCONFIG="i386_defconfig"
			;;
		aarch64)
			export DEFCONFIG="defconfig"
			;;
		armv7l)
			export DEFCONFIG="multi_v7_defconfig"
			;;
		armv5tel)
			export DEFCONFIG="multi_v5_defconfig"
			;;
		mips|mipsel)
			export DEFCONFIG="defconfig"
			;;
		ppc64le)
			export DEFCONFIG="powernv_defconfig"
			;;
		ppc64)
			export DEFCONFIG="g5_defconfig"
			;;
		ppc)
			export DEFCONFIG="pmac32_defconfig"
			;;
		riscv64|riscv32)
			export DEFCONFIG="defconfig"
			;;
		*)
			echo "Architecture is not set or is not supported by januslinux"
			exit 1
	esac

	cd "$SRC"/$name-$version
	unset LDFLAGS
	make mrproper

	if [ "$CROSS" = "yes" ]; then
		make ARCH=$XKARCH CROSS_COMPILE=${CROSS_COMPILE} $DEFCONFIG
	else
		make ARCH=$XKARCH $DEFCONFIG
	fi

	strconfig DEFAULT_HOSTNAME miyuki

	nconfig KERNEL_GZIP KERNEL_BZIP2 LZMA KERNEL_XZ KERNEL_LZO KERNEL_LZ4

	case $BARCH in
		x86_64|i686|i586)
					yconfig UNWINDER_FRAME_POINTER PCI ATA ATA_SFF ATA_BMDMA ATA_PIIX \
						SERIAL_8250 SERIAL_8250_CONSOLE RTC_CLASS \
						IA32_EMULATION COMPAT_32BIT_TIME \
						EFI EFI_STUB FB_EFI FRAMEBUFFER_CONSOLE EFI_VARS EFIVAR_FS \
						KVM_INTEL KVM_AMD CRYPTO_AES_X86_64 FB_HYPERV VBOXGUEST XEN XEN_PV XEN_PV_SMP \
						XEN_DOM0 XEN_PVHVM XEN_PVHVM_SMP XEN_512GB XEN_SAVE_RESTORE XEN_PVH XEN_BALLOON \
						XEN_SELFBALLOONING XEN_BALLOON_MEMORY_HOTPLUG XEN_SCRUB_PAGES_DEFAULT \
						XEN_DEV_EVTCHN XEN_BACKEND XENFS XEN_COMPAT_XENFS XEN_SYS_HYPERVISOR \
						XEN_XENBUS_FRONTEND XEN_GNTDEV XEN_GNTDEV_DMABUF XEN_GRANT_DEV_ALLOC \
						XEN_GRANT_DMA_ALLOC SWIOTLB_XEN XEN_TMEM XEN_PCIDEV_BACKEND \
						XEN_PVCALLS_FRONTEND XEN_PVCALLS_BACKEND XEN_SCSI_BACKEND XEN_PRIVCMD \
						XEN_ACPI_PROCESSOR XEN_MCE_LOG XEN_HAVE_PVMMU XEN_EFI XEN_AUTO_XLATE \
						XEN_ACPI XEN_SYMS XEN_HAVE_VPMU HYPERV HYPERV_TSCPAGE HYPERV_UTILS HYPERV_BALLOON
					nconfig XEN_DEBUG_FS
					varconfig XEN_BALLOON_MEMORY_HOTPLUG_LIMIT 512
					;;
		mips|mipsel)
					yconfig CONFIG_MIPS_MALTA CPU_MIPS32_R2 SERIAL_8250 SERIAL_8250_CONSOLE PCI BLK_DEV_SD \
						ATA ATA_SFF ATA_BMDMA ATA_PIIX NET_VENDOR_AMD PCNET32 POWER_RESET POWER_RESET_SYSCON
					nconfig CPU_LITTLE_ENDIAN CPU_BIG_ENDIAN
					;;
		riscv64|riscv32)
					yconfig RISCV_ISA_C RISCV_ISA_A FPU SIFIVE_PLIC PCI  RPMSG VSOCKETS NET_9P
					nconfig ARCH_RV32I ARCH_RV64I
					;;
	esac

	case $BARCH in
		x86_64)
				yconfig 64BIT IA32_EMULATION X86_X32
				;;
		i686)
				yconfig M686
				;;
		i586)
				yconfig M586
				;;
		mips)
				yconfig CPU_BIG_ENDIAN
				;;
		mipsel)
				yconfig CPU_LITTLE_ENDIAN
				;;
		ppc64le)
				yconfig POWER8
				;;
		riscv64)
				yconfig ARCH_RV64I
				;;
		riscv32)
				yconfig ARCH_RV32I
				;;
	esac

	if [ "$CROSS" = "yes" ]; then
		yes '' | make ARCH=$XKARCH CROSS_COMPILE=${CROSS_COMPILE} oldconfig
	else
		yes '' | make ARCH=$XKARCH oldconfig
	fi

	if [ "$CROSS" = "yes" ]; then
		make ARCH=$XKARCH CROSS_COMPILE=${CROSS_COMPILE} $IMAGE
	else
		make ARCH=$XKARCH $IMAGE
	fi

	mkdir -p "$PKG"/boot

	cp "$IMAGELOC" "$PKG"/boot/vmlinuz-linux
	cp .config "$PKG"/boot/config-linux

	case $BARCH in
		aarch64|armv7l|armv5tel)
			if [ "$CROSS" = "yes" ]; then
				make ARCH=$XKARCH CROSS_COMPILE=${CROSS_COMPILE} INSTALL_DTBS_PATH="$PKG"/boot/dtbs dtbs_install
			else
				make ARCH=$XKARCH INSTALL_DTBS_PATH="$PKG"/boot/dtbs dtbs_install
			fi
			;;
	esac
}
