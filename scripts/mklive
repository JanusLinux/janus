#!/bin/bash

VERSION="20190308"
BARCH="$1"
ISOBUILD="$2"
ISODIR="$3"
ROOTCD="$ISOBUILD/rootcd"
EFIBUILD="$ISOBUILD/efibuild"
STUFF="$STUFF"

set -e

msg() {
	local msg=$(echo $1 | tr -s / /)
	printf "\e[1m\e[32m==>\e[0m $msg\n"
}

die() {
	local msg=$(echo $1 | tr -s / /)
	printf "\e[1m\e[31m==!\e[0m $msg\n"
	exit 1
}

check_for_root() {
	if [[ $EUID -ne 0 ]]; then
		die "'bootstrap' script must be run as root"
	fi
}

check_architecture() {
	case "$BARCH" in
		x86_64|i586|ppc64le|ppc64|ppc)
			true
			;;
		*)
			die "Architecture is not set or is not supported by 'bootstrap' script"
	esac
}

check_path() {
	if [ -z "$ISOBUILD" ]; then
		die "Specify build path"
	fi

	if [ -z "$ISODIR" ]; then
		die "Specify build path"
	fi
}

create_environment() {
	mkdir -p "$ROOTCD" ""$EFIBUILD""
}

install_files() {
	mkdir -p "$ISODIR"/seiba

	cp "$ROOTFS"/boot/vmlinuz-linux "$ISODIR"/seiba/seiba

	cd "$INITRAMFS"

	find . | cpio -H newc -o | pigz > "$ISODIR"/seiba/seiba.gz
}

create_efi() {
	umount -l "$EFIBUILD"/uefi_image || true

	case $BARCH in
		x86_64)
			export EFIVER="x86_64"
			export BOOTEFI="BOOTx64.EFI"
			;;
		i586)
			export EFIVER="x86"
			export BOOTEFI="BOOTIA32.EFI"
			;;
	esac

	kernel_size=`du -b "$ISODIR"/seiba/seiba | awk '{print \$1}'`
	rootfs_size=`du -b "$ISODIR"/seiba/seiba.gz| awk '{print \$1}'`
	loader_size=`du -b $STUFF/mklive/$BOOTEFI | awk '{print \$1}'`

	image_size=$((kernel_size + rootfs_size + loader_size + 65536 + 6291456))
    
	rm -f "$EFIBUILD"/uefi.img
	truncate -s $image_size "$EFIBUILD"/uefi.img

	export LOOP_DEVICE_HDD=$(losetup -f)
	losetup "$LOOP_DEVICE_HDD" "$EFIBUILD"/uefi.img

	mkfs.vfat "$LOOP_DEVICE_HDD"

	rm -rf "$EFIBUILD"/uefi_image
	mkdir -p "$EFIBUILD"/uefi_image/seiba
	mount "$EFIBUILD"/uefi.img "$EFIBUILD"/uefi_image

	mkdir -p "$EFIBUILD"/uefi_image/EFI/BOOT
	cp "$STUFF"/mklive/$BOOTEFI "$EFIBUILD"/uefi_image/EFI/BOOT

	mkdir -p "$EFIBUILD"/uefi_image/seiba
	cp "$ISODIR"/seiba/seiba "$EFIBUILD"/uefi_image/seiba/seiba
	cp "$ISODIR"/seiba/seiba.gz "$EFIBUILD"/uefi_image/seiba/seiba.gz

	mkdir -p "$EFIBUILD"/uefi_image/loader/entries

cat > "$EFIBUILD"/uefi_image/loader/loader.conf << "EOF"
default januslinux
timeout 60
editor 1
EOF

cat > "$EFIBUILD"/uefi_image/loader/entries/januslinux.conf << "EOF"
title januslinux
version $EFIVER
linux /seiba/seiba
initrd /seiba/seiba.gz
EOF

	sync
	umount -l -f "$EFIBUILD"/uefi_image
	sync
	sleep 1

	rm -rf "$EFIBUILD"/uefi_image

	chmod ugo+r "$EFIBUILD"/uefi.img

	cp "$EFIBUILD"/uefi.img "$ISODIR"/uefi.img
}

create_bios() {
	mkdir -p "$ISODIR"/isolinux
	cp "$STUFF"/mklive/isolinux.bin "$ISODIR"/isolinux/isolinux.bin
	cp "$STUFF"/mklive/isolinux.cfg "$ISODIR"/isolinux/isolinux.cfg
	cp "$STUFF"/mklive/ldlinux.c32 "$ISODIR"/isolinux/ldlinux.c32
	cp "$STUFF"/mklive/libutil.c32 "$ISODIR"/isolinux/libutil.c32
	cp "$STUFF"/mklive/menu.c32 "$ISODIR"/isolinux/menu.c32
}

create_iso_x86() {
	xorriso -as mkisofs \
		-isohybrid-mbr "$STUFF"/mklive/isohdpfx.bin \
		-c isolinux/boot.cat \
		-b isolinux/isolinux.bin \
		-no-emul-boot \
		-boot-load-size 4 \
		-boot-info-table \
		-eltorito-alt-boot \
		-e uefi.img \
		-no-emul-boot \
		-isohybrid-gpt-basdat \
		-A 'januslinux' -V 'januslinux' \
		-o "$BUILD"/januslinux-$RELEASE-$BARCH.iso \
		"$ISODIR"/

	isohybrid "$BUILD"/januslinux-$RELEASE-$BARCH.iso
}

check_for_root
check_architecture
check_path
install_files

case $BARCH in
	x86_64|i586)
		create_efi
		create_bios
		create_iso_x86
		;;
	ppc64le|ppc64|ppc)
		echo "soon!"
		;;
esac

exit 0

