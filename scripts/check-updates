#!/bin/bash
#
# Written by Ishimoto Shinobu
#
# Also thanks Void Linux and nemasu for required code!
#

check_updates() {
	local original_name sfname lpname bbname githubname mypkg update_override distfiles homepage

	mypkg="$1"

	. $mypkg/Pkgfile

	: ${update_pkgname:=$update_pkgname}

	homepage="$(cat $mypkg/Pkgfile | grep "^\# URL" | awk '{print $3}')"

	update_override=$mypkg/update
	original_name=$name

	if [ -r $update_override ]; then
		. $update_override
	fi

	export LC_ALL=C

	for a in ${source[@]}; do
		if [ -z "$a" ]; then
			export distfiles="$a"
		else
			export distfiles="$distfiles $a"
		fi
	done

	if [ -z "$site" ]; then
		printf '%s\n' "$homepage"
		for i in $distfiles; do
			printf '%s\n' "${i%/*}/"
		done
	else
		printf '%s\n' "$site"
	fi |
	while IFS= read -r url; do
	rx=
	if [ -z "$site" ]; then
		case "$url" in
			*sourceforge.net/sourceforge*)
				sfname="$(printf %s "$url" | cut -d/ -f5)"
				url="https://sourceforge.net/projects/$sfname/rss?limit=200";;
			*code.google.com*|*googlecode*)
				url="http://code.google.com/p/$update_pkgname/downloads/list";;
			*launchpad.net*)
				url="https://launchpad.net/$update_pkgname/+download";;
			*cpan.*)
				update_pkgname=${update_pkgname#perl-};;
			*pythonhosted.org*)
				update_pkgname=${update_pkgname#python-}
				url="https://pypi.org/simple/$update_pkgname";;
			*github.com*)
				githubname="$(printf %s "$url" | cut -d/ -f4,5)"
				url="https://github.com/$githubname/tags"
				rx='/archive/(v?|\Q'"$update_pkgname"'\E-)?\K[\d\.]+(?=\.tar\.gz")';;
			*gitlab.com*|*gitlab.gnome.org*|*gitlab.freedesktop.org*)
				gitlaburl="$(printf %s "$url" | cut -d/ -f1-5)"
				url="$gitlaburl/tags"
				rx='/archive/[^/]+/\Q'"$update_pkgname"'\E-v?\K[\d\.]+(?=\.tar\.gz")';;
			*bitbucket.org*)
				bbname="$(printf %s "$url" | cut -d/ -f4,5)"
				url="https://bitbucket.org/$bbname/downloads"
				rx='/(get|downloads)/(v?|\Q'"$update_pkgname"'\E-)?\K[\d\.]+(?=\.tar\.gz")';;
			*download.kde.org/stable/applications*|*download.kde.org/stable/frameworks*|*download.kde.org/stable/plasma*)
				url="${url%%${version%.*}*}"
				rx='href="\K[\d\.]+(?=/")';;
			*rubygems.org*)
				url="https://rubygems.org/gems/${update_pkgname#ruby-}"
				rx='versions/\K[\d\.]+' ;;
			*ftp.gnome.org*)
				: ${pattern="\Q$update_pkgname\E-\K[0-9]\.[0-9]*[02468]\.[0-9.]*[0-9](?=)"}
				url="http://ftp.gnome.org/pub/GNOME/sources/$update_pkgname/cache.json";;
			*kernel.org/pub/linux/kernel/*)
				rx=linux-'\K'${version%.*}'[\d.]+(?=\.tar\.xz)';;
		esac
	fi

	rx=${pattern:-$rx}
	rx=${rx:-'(?<!-)\b\Q'"$update_pkgname"'\E[-_]?((src|source)[-_])?\K([^-/_\s]*?\d[^-/_\s]*?)(?=(?:[-_.](?:src|source|orig))?\.(?:[jt]ar|shar|t[bglx]z|tbz2|zip))\b'}

        curl --max-time 10 -Ls "$url" |
            grep -Po -i "$rx"
	done |
	sort -Vu -r |
	head -n 1 |
	while IFS= read -r found_version; do
	consider=true
	p="$ignore "
	while [ -n "$p" ]; do
		i=${p%% *}
		p=${p#* }
		case "$found_version" in
		$i)
			consider=false
		esac
	done
	if $consider; then
		if [ "$version" != "$found_version" ]; then
			echo "update $name to $found_version"
		fi
	fi
	done
}

for packages in $(ls $REPO/); do
	case $packages in
		run-parts|ifupdown|bash|base-files|sbase|ubase|sinit|autoconf2.13|musl-tools)
			true
			;;
		*)
			check_updates $REPO/$packages
			;;
	esac
done

exit 0
