#!/usr/bin/env bash
#
# The 'Marisa' build system
#
# Copyright (c) 2016-2021 Ataraxia Linux <ataraxialinux@protonmail.com>

# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

set -e

source core.functions

build_toolchain() {
	if check_stamp toolchain; then
		return 0
	fi

	msg "Preparing environment for build"
	make_environment

	msg "Building cross-toolchain for '${BARCH}' architecture"
	emerge_host gettext-tiny
	emerge_host ncurses
	emerge_host texinfo
	emerge_host m4
	emerge_host bison
	emerge_host flex
	emerge_host bc
	emerge_host kmod
	emerge_host gperf
	emerge_host python
	emerge_host samurai
	emerge_host meson
	emerge_host cmake
	emerge_ht linux-headers
	emerge_host musl-headers
	emerge_host binutils
	emerge_host llvm
	emerge_target libexecinfo
	emerge_host compiler-rt
	force="-f" \
		emerge_target musl
	emerge_host llvm-runtime
	emerge_host slibtool
	emerge_host autoconf
	emerge_host automake
	emerge_host pkgconf

	case $BARCH in
		amd64|x86|arm64|armv7l|armv6l|armv5te|ppc64le|ppc64|riscv64)
			emerge_host grub
			;;
	esac

	msg "Cleaning up"
	find "$TOOLS" -name "*.la" -print0 | xargs -0 rm -rf
	find "$TOOLS" -name "*.pod" -print0 | xargs -0 rm -rf
	find "$TOOLS" -name ".packlist" -print0 | xargs -0 rm -rf

	msg "Adding fake make"
	install -m755 "$STUFF"/fakemake "$TOOLS"/bin/make
	sed -i "s|uncom|$ORIGMAKE|" "$TOOLS"/bin/make

	stamp toolchain

	msg "Toolchain has been built successfuly."
}

build_system() {
	if ! check_stamp toolchain; then
		die "Build toolchain first."
	fi

	msg "Building target system for '${BARCH}' architecture"
	emerge_target base-files
	emerge_target iana-etc
	emerge_target man-pages
	emerge_target musl-tools
	emerge_target gettext-tiny
	emerge_target tzdata
	emerge_target m4
	emerge_target bison
	emerge_target flex
	emerge_target bc
	emerge_target zlib
	emerge_target bzip2
	emerge_target xz
	emerge_target lz4
	emerge_target zstd
	emerge_target lzo
	emerge_target file
	emerge_target ncurses
	emerge_target libedit
	emerge_target gmp
	emerge_target attr
	emerge_target acl
	emerge_target libressl
	emerge_target nettle
	emerge_target ca-certificates
	emerge_target expat
	emerge_target gdbm
	emerge_target db53
	emerge_target sqlite
	emerge_target libffi
	emerge_target python
	emerge_target python-setuptools
	emerge_target perl
	emerge_target libxml2
	emerge_target libarchive
	emerge_target libssh2
	emerge_target nghttp2
	emerge_target c-ares
	emerge_target libunistring
	emerge_target libidn2
	emerge_target brotli
	emerge_target krb5
	emerge_target curl
	emerge_target make
	emerge_target samurai
	emerge_target meson
	emerge_target jsoncpp
	emerge_target rhash
	emerge_target libuv
	emerge_target cmake
	emerge_target libuargp
	emerge_target libelf
	emerge_target binutils
	if ! check_stamp llvm; then
		force="-f" \
			emerge_target llvm
		stamp llvm
	else
		emerge_target llvm
	fi
	emerge_target ccache
	emerge_target pkgconf
	emerge_target cracklib
	emerge_target libtirpc
	emerge_target libcap-ng
	emerge_target audit
	emerge_target pam
	emerge_target libcap
	emerge_target libpwquality
	emerge_target shadow
	emerge_target psmisc
	emerge_target grep
	emerge_target mksh
	emerge_target bash
	emerge_target slibtool
	emerge_target gperf
	emerge_target autoconf
	emerge_target automake
	emerge_target kmod
	# emerge_target openbsd or gnu coreutils whatever
	emerge_target check
	emerge_target one-true-awk
	emerge_target mandoc
	emerge_target libmnl
	emerge_target libnftnl
	emerge_target libnfnetlink
	emerge_target libnetfilter_conntrack
	emerge_target libnl
	emerge_target libpcap
	emerge_target iptables
	emerge_target iproute2
	emerge_target kbd
	# emerge_target tar cpio
	emerge_target texinfo
	emerge_target vi
	emerge_target libgpg-error
	emerge_target libgcrypt
	emerge_target libseccomp
	case $BARCH in
		amd64|x86|arm64|armv7l|armv6l|armv5te)
			emerge_target gnu-efi
			;;
	esac
	emerge_target hwids
	if ! check_stamp util-linux-pass1; then
		emerge_target util-linux-runtime
		rm -rf "$PACKAGES"/util-linux-runtime-*.czst
		stamp util-linux-pass1
	fi
	if ! check_stamp systemd-pass1; then
		emerge_target systemd-runtime
		rm -rf "$PACKAGES"/systemd-runtime-*.czst
		stamp systemd-pass1
	fi
	if ! check_stamp util-linux-final; then
		pushd "$REPO/util-linux"
			tsukuri bi -c "$BUILD/target.config" -w
		popd

		tsukuri rm -c "$BUILD/target.config" -r "$ROOTFS" util-linux-runtime
		emerge_target util-linux

		stamp util-linux-final
	else
		emerge_target util-linux
	fi
	emerge_target libaio
	emerge_target lvm2
	emerge_target popt
	emerge_target json-c
	emerge_target argon2
	emerge_target cryptsetup
	if ! check_stamp systemd-final; then
		pushd "$REPO/systemd"
			tsukuri bi -c "$BUILD/target.config" -w
		popd

		tsukuri rm -c "$BUILD/target.config" -r "$ROOTFS" systemd-runtime
		emerge_target systemd

		stamp systemd-final
	else
		emerge_target systemd
	fi
	emerge_target dbus
	emerge_target dbus-broker

	stamp system

	msg "System has been built successfuly."
}

nspawn_image() {
	if ! check_stamp system; then
		die "Build target system first."
	fi

	local imagefs img bootpart rootpart signpart homepart

	imagefs="$BUILD/image"

	rm -rf "$imagefs"
	mkdir -p "$imagefs"

	img="$BUILD/ataraxialinux-$BARCH.img"

	losetup -D
	qemu-img create -f raw "$img" 6G

	sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' <<-EOF | fdisk "$img"
		g
		n
		1
	  	
		+256M
		t
		1
		n
		2
	  	
		+2G
		t
		2
		23
		n
		3
	  	
		+512M
		t
		3
		39
		n
		4
	  	
	  	
		t
		4
		28
		p
		w
		q
	EOF

	losetup -fP "$img"
	lodev=$(losetup -a | grep "$img" | cut -d: -f1)

	bootpart="${lodev}p1"
	rootpart="${lodev}p2"
	signpart="${lodev}p3"
	homepart="${lodev}p4"

	mkfs.vfat -F32 "$bootpart"
	mkfs.ext4 "$rootpart"
	mkfs.ext4 "$homepart"

	mount "$rootpart" "$imagefs"

	mkdir -p "$imagefs/boot" "$imagefs/home"

	mount "$bootpart" "$imagefs/boot"
	mount "$homepart" "$imagefs/home"

	mkdir -p "$imagefs/usr/lib/tsukuri/db"

	emerge_target base-files "$imagefs"
	emerge_target iana-etc "$imagefs"
	emerge_target linux-headers "$imagefs"
	emerge_target musl "$imagefs"
	emerge_target man-pages "$imagefs"
	emerge_target musl-tools "$imagefs"
	emerge_target gettext-tiny "$imagefs"
	emerge_target tzdata "$imagefs"
	emerge_target m4 "$imagefs"
	emerge_target bison "$imagefs"
	emerge_target flex "$imagefs"
	emerge_target bc "$imagefs"
	emerge_target zlib "$imagefs"
	emerge_target bzip2 "$imagefs"
	emerge_target xz "$imagefs"
	emerge_target lz4 "$imagefs"
	emerge_target zstd "$imagefs"
	emerge_target lzo "$imagefs"
	emerge_target file "$imagefs"
	emerge_target ncurses "$imagefs"
	emerge_target libedit "$imagefs"
	emerge_target gmp "$imagefs"
	emerge_target attr "$imagefs"
	emerge_target acl "$imagefs"
	emerge_target libressl "$imagefs"
	emerge_target nettle "$imagefs"
	emerge_target ca-certificates "$imagefs"
	emerge_target expat "$imagefs"
	emerge_target gdbm "$imagefs"
	emerge_target db53 "$imagefs"
	emerge_target sqlite "$imagefs"
	emerge_target libffi "$imagefs"
	emerge_target python "$imagefs"
	emerge_target python-setuptools "$imagefs"
	emerge_target perl "$imagefs"
	emerge_target libxml2 "$imagefs"
	emerge_target libarchive "$imagefs"
	emerge_target libssh2 "$imagefs"
	emerge_target nghttp2 "$imagefs"
	emerge_target c-ares "$imagefs"
	emerge_target libunistring "$imagefs"
	emerge_target libidn2 "$imagefs"
	emerge_target brotli "$imagefs"
	emerge_target krb5 "$imagefs"
	emerge_target curl "$imagefs"
	emerge_target make "$imagefs"
	emerge_target samurai "$imagefs"
	emerge_target meson "$imagefs"
	emerge_target jsoncpp "$imagefs"
	emerge_target rhash "$imagefs"
	emerge_target libuv "$imagefs"
	emerge_target cmake "$imagefs"
	emerge_target libuargp "$imagefs"
	emerge_target libelf "$imagefs"
	emerge_target binutils "$imagefs"
	emerge_target llvm "$imagefs"
	emerge_target ccache "$imagefs"
	emerge_target pkgconf "$imagefs"
	emerge_target cracklib "$imagefs"
	emerge_target libtirpc "$imagefs"
	emerge_target libcap-ng "$imagefs"
	emerge_target audit "$imagefs"
	emerge_target pam "$imagefs"
	emerge_target libcap "$imagefs"
	emerge_target libpwquality "$imagefs"
	emerge_target shadow "$imagefs"
	emerge_target psmisc "$imagefs"
	emerge_target grep "$imagefs"
	emerge_target mksh "$imagefs"
	emerge_target bash "$imagefs"
	emerge_target slibtool "$imagefs"
	emerge_target gperf "$imagefs"
	emerge_target autoconf "$imagefs"
	emerge_target automake "$imagefs"
	emerge_target kmod "$imagefs"
	emerge_target check "$imagefs"
	emerge_target one-true-awk "$imagefs"
	emerge_target mandoc "$imagefs"
	emerge_target libmnl "$imagefs"
	emerge_target libnftnl "$imagefs"
	emerge_target libnfnetlink "$imagefs"
	emerge_target libnetfilter_conntrack "$imagefs"
	emerge_target libnl "$imagefs"
	emerge_target libpcap "$imagefs"
	emerge_target iptables "$imagefs"
	emerge_target iproute2 "$imagefs"
	emerge_target kbd "$imagefs"
	emerge_target texinfo "$imagefs"
	emerge_target vi "$imagefs"
	emerge_target libgpg-error "$imagefs"
	emerge_target libgcrypt "$imagefs"
	emerge_target libseccomp "$imagefs"
	case $BARCH in
		amd64|x86|arm64|armv7l|armv6l|armv5te)
			emerge_target gnu-efi "$imagefs"
			;;
	esac
	emerge_target hwids "$imagefs"
	emerge_target util-linux "$imagefs"
	emerge_target libaio "$imagefs"
	emerge_target lvm2 "$imagefs"
	emerge_target popt "$imagefs"
	emerge_target json-c "$imagefs"
	emerge_target argon2 "$imagefs"
	emerge_target cryptsetup "$imagefs"
	emerge_target systemd "$imagefs"
	emerge_target dbus "$imagefs"
	emerge_target dbus-broker "$imagefs"

	rm "$imagefs/etc/securetty"

	umount -lf "$homepart" "$bootpart" "$rootpart"

	veritysetup format "$rootpart" "$signpart"
}

main() {
	local mode opts
	local date="$(date)"

	case "$1" in
		target) shift; mode="build_target" ;;
	esac

	while getopts a: opts; do
		case $opts in
			a) BARCH="$OPTARG" ;;
		esac
	done
	shift $((OPTIND -1))

	msg 'Invoking `Marisa` on '"${date}"''

	check_for_root

	if [ "$mode" = "build_target" ]; then
		if [ -z "$1" ]; then
			die "Target is not specified."
		fi

		check_for_arch "$BARCH"

		msg "Exporting variables"
		export_variables "$BARCH"
		export_cflags "$BARCH"

		case "$1" in
			toolchain) build_toolchain ;;
			system) build_toolchain; build_system ;;
			nspawn-image) nspawn_image ;;
			*) die "Unknown target" ;;
		esac
	fi
}

main "$@"

exit 0

