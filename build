#!/usr/bin/env bash
#
# The 'Marisa' build system
#
# Copyright (c) 2016-2021 Ataraxia Linux <ataraxialinux@protonmail.com>

# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

set -e

source core.functions

build_toolchain() {
	if check_stamp toolchain; then
		return 0
	fi

	if ! check_stamp env; then
		msg "Preparing environment for build"
		make_environment
		stamp env
	fi

	msg "Building cross-toolchain for '${BARCH}' architecture"
	emerge_host gettext-tiny
	emerge_host ncurses
	emerge_host texinfo
	emerge_host m4
	emerge_host bison
	emerge_host flex
	emerge_host bc
	emerge_host kmod
	emerge_host gperf
	emerge_host python
	emerge_host samurai
	emerge_host meson
	emerge_host cmake
	emerge_ht linux-headers
	emerge_ht fortify-headers
	emerge_host musl-headers
	emerge_host binutils
	emerge_host llvm
	emerge_target -f musl
	emerge_host llvm-runtime
	emerge_host slibtool
	emerge_host autoconf
	emerge_host automake
	emerge_host pkgconf

	case $BARCH in
		amd64|x86|arm64|armv7l|armv6l|armv5te|ppc64le|ppc64|riscv64)
			emerge_host grub
			;;
	esac

	msg "Cleaning up"
	find "$TOOLS" -name "*.la" -print0 | xargs -0 rm -rf
	find "$TOOLS" -name "*.pod" -print0 | xargs -0 rm -rf
	find "$TOOLS" -name ".packlist" -print0 | xargs -0 rm -rf

	msg "Adding fake make"
	install -m755 "$STUFF"/fakemake "$TOOLS"/bin/make
	sed -i "s|uncom|$ORIGMAKE|" "$TOOLS"/bin/make

	stamp toolchain

	msg "Toolchain has been built successfuly."
}

build_system() {
	if ! check_stamp toolchain; then
		die "Build toolchain first."
	fi

	msg "Building target system for '${BARCH}' architecture"

	true

	stamp system

	msg "System has been built successfuly."
}

main() {
	local mode opts
	local date="$(date)"

	case "$1" in
		target) shift; mode="build_target" ;;
	esac

	while getopts b: opts; do
		case $opts in
			b) BARCH="$OPTARG" ;;
		esac
	done
	shift $((OPTIND -1))

	msg 'Invoking `Marisa` on '"${date}"''

	check_for_root

	if [ "$mode" = "build_target" ]; then
		if [ -z "$1" ]; then
			die "Target is not specified."
		fi

		check_for_arch "$BARCH"

		msg "Exporting variables"
		export_variables "$BARCH"
		export_cflags "$BARCH"

		case "$1" in
			toolchain) build_toolchain ;;
			system) build_toolchain; build_system ;;
			*) die "Unknown target" ;;
		esac
	fi
}

main "$@"

exit 0

