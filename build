#!/usr/bin/env bash
#
# Utility to bootstrap Ataraxia Linux distribution
#
# Copyright (c) 2016-2020 Ataraxia Linux <ataraxialinux@protonmail.com>

# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.

# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

set -e

msg() { printf "\033[1;34m::\033[0m %s\n" "$@"; }
die() { printf "\033[1;31m::\033[0m %s\n" "$@"; exit 1; }

pushd () { command pushd "$@" > /dev/null; }
popd () { command popd "$@" > /dev/null; }

check_for_root() {
	if [[ $EUID -ne 0 ]]; then
		die "You must be root to run 'build'"
	fi
}

generate_config() {
	local file="$1"

	if [ "$USE_TARGET" = "1" ]; then
		cat > "$file" <<- EOF
			export BARCH="$BARCH"
			export mkopts="$MKOPTS"
			export buildoptions=(emptydirs strip makeflags ~locales ~docs ~ccache ~libtool ~nobootstrap)
			export repos="${REPO}"
			export ROOTFS="$ROOTFS"
			export TOOLS="$TOOLS"
			export pkgdest="$PACKAGES"
			export srcdest="$SOURCES"
			export CFLAGS="$CFLAGS"
			export CXXFLAGS="$CXXFLAGS"
			export XHOST="$XHOST"
			export XTARGET="$XTARGET"
			export CROSS_COMPILE="$XTARGET-"
			export CC="$XTARGET-gcc"
			export CXX="$XTARGET-g++"
			export AR="$XTARGET-ar"
			export AS="$XTARGET-as"
			export RANLIB="$XTARGET-ranlib"
			export LD="$XTARGET-ld"
			export STRIP="$XTARGET-strip"
			export OBJCOPY="$XTARGET-objcopy"
			export OBJDUMP="$XTARGET-objdump"
			export SIZE="$XTARGET-size"
			export BUILDFLAGS="--build=$XHOST --host=$XTARGET"
			export TOOLFLAGS="--build=$XHOST --host=$XTARGET --target=$XTARGET"
			export PERLFLAGS="--target=$XTARGET"
			export PKG_CONFIG_PATH="$ROOTFS/usr/lib/pkgconfig:$ROOTFS/usr/share/pkgconfig"
			export PKG_CONFIG_SYSROOT_DIR="$ROOTFS"
			export HOSTCC="$HOSTCC"
			export HOSTCXX="$HOSTCXX"
			export ORIGMAKE="$ORIGMAKE"
			export PATH="$PATH"
			export STUFF="$STUFF"
		EOF
	elif [ "$USE_HOST" = "1" ]; then
		cat > "$file" <<- EOF
			export BARCH="$BARCH"
			export mkopts="$MKOPTS"
			export buildoptions=(emptydirs ~strip makeflags ~locales ~docs ~ccache ~libtool ~nobootstrap)
			export repos="${TCREPO} ${REPO}"
			export ROOTFS="$ROOTFS"
			export TOOLS="$TOOLS"
			export pkgdest="$PACKAGES"
			export srcdest="$SOURCES"
			export CFLAGS="$CFLAGS"
			export CXXFLAGS="$CXXFLAGS"
			export XHOST="$XHOST"
			export XTARGET="$XTARGET"
			export HOSTCC="$HOSTCC"
			export HOSTCXX="$HOSTCXX"
			export ORIGMAKE="$ORIGMAKE"
			export PATH="$PATH"
			export STUFF="$STUFF"
		EOF
	fi
}

setup_architecture() {
	case "$BARCH" in
		x86_64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="x86_64-linux-musl"
			;;
		i686)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="i686-linux-musl"
			;;
		aarch64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="aarch64-linux-musl"
			;;
		armv7hl)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="arm-linux-musleabihf"
			;;
		armv6hl)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="arm-linux-musleabi"
			;;
		ppc64le)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="powerpc64le-linux-musl"
			;;
		ppc64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="powerpc64-linux-musl"
			;;
		s390x)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="s390x-linux-musl"
			;;
		riscv64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="riscv64-linux-musl"
			;;
		*)
			die "Architecture is not set or is not supported by 'build' script"
	esac
}

setup_environment() {
	msg "Setting up the build environment"

	export CWD="$(pwd)"
	export BUILD="$CWD/OUT.$BARCH"
	export SOURCES="$BUILD/sources"
	export PACKAGES="$BUILD/packages"
	export ROOTFS="$BUILD/rootfs"
	export TOOLS="$BUILD/tools"
	export STUFF="$CWD/stuff"
	export REPO="$CWD/packages"
	export TCREPO="$CWD/toolchain"
	export UTILS="$CWD/utils"

	export PATH="$UTILS:$TOOLS/bin:$PATH"
	export HOSTCC="gcc"
	export HOSTCXX="g++"
	export ORIGMAKE="$(which make)"

	if [ -z "$JOBS" ]; then
		export JOBS="$(expr $(nproc) + 1)"
	fi

	export MKOPTS="-j$JOBS"

	if [ -z "$CFLAGS" ]; then
		case $BARCH in
			x86_64|i686)
				export CFLAGS="-D_FORTIFY_SOURCE=2 -g0 -Os -s -fomit-frame-pointer -fstack-protector-strong -fstack-clash-protection -fcf-protection=full -Wl,-z,relro,-z,now -Wl,--as-needed -Wl,--gc-sections -pipe"
				;;
			*)
				export CFLAGS="-D_FORTIFY_SOURCE=2 -g0 -Os -s -fomit-frame-pointer -fstack-protector-strong -fstack-clash-protection -Wl,-z,relro,-z,now -Wl,--as-needed -Wl,--gc-sections -pipe"
				;;
		esac
	fi
	if [ -z "$CXXFLAGS" ]; then
		export CXXFLAGS="$CFLAGS"
	fi
}

build_environment() {
	msg "Preparing the environment for build"

	rm -rf "$BUILD"
	mkdir -p "$BUILD" "$SOURCES" "$PACKAGES" "$ROOTFS" "$TOOLS"

	USE_HOST=1 generate_config "$BUILD"/host.config
	USE_TARGET=1 generate_config "$BUILD"/target.config
}


build_toolchain() {
	local EXTRAPKG

	msg "Building cross-toolchain for '${BARCH}' platform"

	msg "Adding fake ldconfig"
	mkdir -p "$TOOLS"/bin

	touch "$TOOLS"/bin/ldconfig
	chmod +x "$TOOLS"/bin/ldconfig

	case $BARCH in
		x86_64|i686|aarch64|armv7hl|armv6hl|ppc64le|ppc64)
				EXTRAPKG="grub"
				;;
	esac

	mkdir -p "$ROOTFS/usr/lib/hydra/db"

	for toolchain in base-files gettext-tiny m4 bison flex bc kmod heimdal gperf \
			python samurai meson linux-headers binutils gcc-static musl gcc $EXTRAPKG \
			slibtool autoconf automake cracklib pkgconf; do
		case $toolchain in
			base-files|linux-headers)
				hydra em -c "$BUILD"/host.config -r "$ROOTFS" -wND ${toolchain}
				;;
			musl)
				hydra em -c "$BUILD"/target.config -r "$ROOTFS" -wND ${toolchain}
				;;
			*)
				pushd "$TCREPO/host-$toolchain"
					hydra bi -c "$BUILD"/host.config -wp
				popd
				;;
		esac
	done
	touch "$TOOLS"/.cross-linux

	msg "Cleaning up"
	find "$TOOLS" -name "*.la" -print0 | xargs -0 rm -rf
	find "$TOOLS" -name "*.pod" -print0 | xargs -0 rm -rf
	find "$TOOLS" -name ".packlist" -print0 | xargs -0 rm -rf

	msg "Adding fake make"
	cp "$STUFF"/fakemake "$TOOLS"/bin/make
	sed -i "s,uncom,$ORIGMAKE,g" "$TOOLS"/bin/make
	chmod +x "$TOOLS"/bin/make
}

build_target() {
	msg "Building target system for '${BARCH}' platform"

	if [ -z "$LINUX" ]; then
		LINUX="linux"
	fi

	packages="netbase selinux-policy tzdata man-pages musl-tools gettext-tiny \
		zlib xz lz4 zstd bzip2 file ncurses readline m4 bison flex bc gmp mpfr mpc \
		binutils gcc pkgconf pcre libcap-ng audit libsepol libselinux libsemanage \
		cracklib libtirpc pam libpwquality attr acl libcap shadow grep sed psmisc \
		mksh bash slibtool net-tools gdbm db53 sqlite expat libffi libressl nettle \
		python perl ca-certificates autoconf automake lzip libarchive lzo kmod libuargp libelf \
		gawk findutils 9base lobase sbase ubase less checkpolicy policycoreutils semodule-utils \
		mandoc dialog gzip ncompress libmnl libnftnl libnfnetlink libnetfilter_conntrack libnl libpcap \
		iptables iproute2 kbd samurai python-setuptools meson make patch tar cpio nano gperf libseccomp \
		libblkid libsystemd util-linux libaio lvm2 popt json-c argon2 cryptsetup hwids systemd dbus-broker dbus \
		iputils procps-ng e2fsprogs btrfs-progs dosfstools run-parts libssh2 nghttp2 c-ares heimdal curl \
		wireless_tools wpa_supplicant gptfdisk wget libevent links dropbear $LINUX"

	for i in $packages; do
		case $i in
			libblkid)
				if [ ! -f "$BUILD/.blkid" ]; then
					hydra em -c "$BUILD"/target.config -r "$ROOTFS" -wNDSH libblkid
					rm -rf "$BUILD"/packages/libblkid-*.br
					touch "$BUILD"/.blkid "$BUILD"/.rmblkid
				fi
				;;
			libsystemd)
				if [ ! -f "$BUILD/.libsystemd" ]; then
					hydra em -c "$BUILD"/target.config -r "$ROOTFS" -wNDSH libsystemd
					rm -rf "$BUILD"/packages/libsystemd-*.br
					touch "$BUILD"/.libsystemd "$BUILD"/.rmsystemd
				fi
				;;
			util-linux)
				pushd "$REPO/util-linux"
					hydra bi -c "$BUILD"/target.config -w util-linux
				popd
				if [ -f "$BUILD/.rmblkid" ]; then
					hydra rm -c "$BUILD"/target.config -r "$ROOTFS" -DH libblkid
					rm "$BUILD"/.rmblkid
				fi
				hydra em -c "$BUILD"/target.config -r "$ROOTFS" -wNDSH util-linux
				;;
			systemd)
				pushd "$REPO/systemd"
					hydra bi -c "$BUILD"/target.config -w systemd
				popd
				if [ -f "$BUILD/.rmsystemd" ]; then
					hydra rm -c "$BUILD"/target.config -r "$ROOTFS" -DH libsystemd
					rm "$BUILD"/.rmsystemd
				fi
				hydra em -c "$BUILD"/target.config -r "$ROOTFS" -wNDSH systemd
				;;
			*)
				hydra em -c "$BUILD"/target.config -r "$ROOTFS" -wNDSH $i
				;;
		esac
	done

	if [ ! -f "$BUILD/.core-built" ]; then
		touch "$BUILD"/.core-built
	fi
}

genrepo() {
	unset name version release options backup source noextract depends
	local d i e url

	if [ -f "$1/.ignoreit" ]; then
		return 0
	fi
	if [ ! -d "$1" ]; then
		return 0
	fi

	source $1/KagamiBuild
	local summary="$(npk-parse $1/KagamiBuild "# Description:")"
	local homepage="$(npk-parse $1/KagamiBuild "# URL:")"
	local category="$(npk-parse $1/KagamiBuild "# Section:")"
	local maintainer="$(npk-parse  $1/KagamiBuild "# Maintainer:" | sed -e 's/, / /g' | sed -e 's/ at /@/g' | sed -e 's/ dot /./')"

	e="$(echo $maintainer | awk '{print $NF}')"

	for i in ${source[*]}; do
		if echo $i | grep -q '::archive='; then
			url="$(echo $i | sed -e 's/::archive=/ /g' | awk '{print $1}')"
		else
			url="$i"
		fi

		if [ -n "$d" ]; then
			d="$d $url"
		else
			d="$url"
		fi
	done

	echo -e '\t{' >> "$2"
	echo -e '\t\t"name": "'${name}'",' >> "$2"
	echo -e '\t\t"version": "'${version}'",' >> "$2"
	echo -e '\t\t"summary": "'${summary}'",' >> "$2"
	echo -e '\t\t"maintainer": "'${e}'",' >> "$2"
	echo -e '\t\t"download": "'${d}'",' >> "$2"
	echo -e '\t\t"homepage": "'${homepage}'",' >> "$2"
	echo -e '\t\t"category": "'${category}'"' >> "$2"
	echo -e '\t},' >> "$2"
}

case $1 in
	stage)
		shift
		while getopts :a:j:g:e:l:E opts; do
			case $opts in
				a)
					BARCH="$OPTARG"
					;;
				j)
					JOBS="$OPTARG"
					;;
				g)
					GCCOPTS="$OPTARG"
					;;
				e)
					ELFOPTS="$OPTARG"
					;;
				l)
					LINUX="$OPTARG"
					;;
				:)
					die "Option '-${OPTARG}' needs an argument"
					;;
				\?)
					die "Option '-${OPTARG}' is illegal"
					;;
			esac
		done
		shift $((OPTIND - 1))

		case $1 in
			meta-toolchain)
				check_for_root
				setup_architecture
				setup_environment
				build_environment
				build_toolchain
				;;
			core-image-minimal)
				check_for_root
				setup_architecture
				setup_environment
				if [ ! -f "$TOOLS/.cross-linux" ]; then
					build_environment
					build_toolchain
				fi
				build_target
				;;
			*)
				die "Specify target"
				;;
		esac
		;;
	image|installer|live|archive)
		if [ -z "$1" ]; then
			die "Specify target"
		fi

		case $1 in
			archive)
				prog="mkstage"
				;;
			*)
				prog="mk${1}"
				;;
		esac

		shift
		while getopts :a:j:l:d:E opts; do
			case $opts in
				a)
					BARCH="$OPTARG"
					;;
				j)
					JOBS="$OPTARG"
					;;
				l)
					LINUX="$OPTARG"
					;;
				d)
					DESKTOP="$OPTARG"
					;;
				:)
					die "Option '-${OPTARG}' needs an argument"
					;;
				\?)
					die "Option '-${OPTARG}' is illegal"
					;;
			esac
		done
		shift $((OPTIND - 1))

		check_for_root
		setup_architecture
		setup_environment

		source "$UTILS/$prog"
		main
		;;
	check-updates)
		shift
		while getopts ac opts; do
			case $opts in
				a)
					AUTOBUMB="yes"
					;;
				c)
					AUTOCOMMIT="yes"
					;;
				:)
					die "Option '-${OPTARG}' needs an argument"
					;;
				\?)
					die "Option '-${OPTARG}' is illegal"
					;;
			esac
		done
		shift $((OPTIND - 1))

		[ "$AUTOBUMB" = "yes" ] && cuopt="-a"
		[ "$AUTOCOMMIT" = "yes" ] && cuopttwo="-c"

		SILENT=1 setup_environment
		msg "Checking packages for updates"
		for packages in $(ls "$REPO/" | sort); do
			pushd "$REPO"
				(
					if [ "$packages" = "libblkid" ]; then
						true
					elif [ "$packages" = "libsystemd" ]; then
						true
					#elif [ "$packages" = "linux" ]; then
					#	"$UTILS/check-updates" linux
					#elif [ "$packages" = "linux-headers" ]; then
					#	"$UTILS/check-updates" linux-headers
					else
						"$UTILS/check-updates" $cuopt $cuopttwo $packages
					fi
				)
			popd
		done
		;;
	gen-repo)
		shift
		SILENT=1 setup_environment

		[ -f "$REPO/repo" ] && rm "$REPO/repo"
		echo "[" >> "$REPO/repo"
		for packages in $(ls "$REPO/" | sort); do
			pushd "$REPO"
				(
					if [ "$packages" = "repo" ]; then
						true
					else
						genrepo $packages $REPO/repo
					fi
				)
			popd
		done
		echo "]" >> "$REPO/repo"
		index="$(expr $(cat $REPO/repo | wc -l) - 1)"
		sed -i "${index}s/},/}/" "$REPO/repo"
		;;
	enter-chroot)
		shift
		while getopts a:s opts; do
			case $opts in
				a)
					BARCH="$OPTARG"
					;;
				s)
					STAGE=1
					;;
				:)
					die "Option '-${OPTARG}' needs an argument"
					;;
				\?)
					die "Option '-${OPTARG}' is illegal"
					;;
			esac
		done
		shift $((OPTIND - 1))

		check_for_root
		setup_architecture
		setup_environment

		if [ "$BARCH" = "i686" ] && [ "$(uname -m)" = "x86_64" ]; then
			HELPER="linux32"
		fi

		if [ "$STAGE" = "1" ]; then
			rootdir="$BUILD/stage"
		else
			rootdir="$BUILD/rootfs"
		fi
		for i in proc sys dev; do
			mount --bind /$i $rootdir/$i
		done
		mkdir -p "$rootdir"/usr/ports/packages "$rootdir"/usr/ports/stuff
		for i in packages stuff; do
			mount --bind "$CWD/$i" "$rootdir/usr/ports/$i"
		done
		for i in packages sources; do
			mount --bind "$BUILD/$i" "$rootdir/var/cache/$i"
		done

		[ ! -L "$rootdir/etc/mtab" ] && ln -sf ../proc/self/mounts "$rootdir"/etc/mtab

		$HELPER chroot "$rootdir" /usr/bin/env -i \
			HOME=/home/root \
			TERM="$TERM" \
			PATH=/usr/bin \
			/usr/bin/mksh
		for i in proc sys dev usr/ports/packages usr/ports/stuff var/cache/packages var/cache/sources; do
			umount -l $rootdir/$i
		done
		;;
esac

exit 0

