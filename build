#!/bin/bash

set -e

if [ "$RELEASE" = "1" ]; then
	export RELEASE="$(date +%y%m%d)"
else
	export RELEASE="minefield-$(date +%y%m%d)"
fi

msg() {
	local msg=$(echo $1 | tr -s / /)
	printf "\e[1m\e[32m==>\e[0m $msg\n"
}

die() {
	local msg=$(echo $1 | tr -s / /)
	printf "\e[1m\e[31m==!\e[0m $msg\n"
	exit 1
}

check_for_root() {
	if [[ $EUID -ne 0 ]]; then
		die "'bootstrap' script must be run as root"
	fi
}

pkginstall() {
	local pkg="$@"
	for emergepkg in $pkg; do
		msg "Emerging '"$emergepkg"' package"
		cd "$REPO"/$emergepkg
		if [ ! -f "$PACKAGES"/$emergepkg#*.pkg.tar.lz4 ]; then
			pkgmk -d -b -cf "$BUILD"/target-pkgmk.conf
		fi
		if [ ! -f "$PACKAGES"/$emergepkg#*.pkg.tar.lz4 ]; then
			die "Couldn't get binary package of '"$emergepkg"'"
		fi
		pkgadd "$PACKAGES"/$emergepkg#*.pkg.tar.lz4 --root "$ROOTFS" || true
	done
}

pkginstalltwo() {
	local pkg="$@"
	for emergepkg in $pkg; do
		msg "Emerging '"$emergepkg"' package"
		cd "$REPO"/$emergepkg
		if [ ! -f "$PACKAGES"/$emergepkg#*.pkg.tar.lz4 ]; then
			pkgmk -d -b -cf "$BUILD"/host-pkgmk.conf
		fi
		if [ ! -f "$PACKAGES"/$emergepkg#*.pkg.tar.lz4 ]; then
			die "Couldn't get binary package of '"$emergepkg"'"
		fi
		pkgadd "$PACKAGES"/$emergepkg#*.pkg.tar.lz4 --root "$ROOTFS" || true
	done
}

pkgbspinstall() {
	local pkg="$@"
	for emergepkg in $pkg; do
		msg "Emerging '"$emergepkg"' package"
		cd "$BSPREPO"/$emergepkg
		if [ ! -f "$PACKAGES"/$emergepkg#*.pkg.tar.lz4 ]; then
			pkgmk -d -b -cf "$BUILD"/target-pkgmk.conf
		fi
		if [ ! -f "$PACKAGES"/$emergepkg#*.pkg.tar.lz4 ]; then
			die "Couldn't get binary package of '"$emergepkg"'"
		fi
		pkgadd "$PACKAGES"/$emergepkg#*.pkg.tar.lz4 --root "$ROOTFS" || true
	done
}

pkghostinstall() {
	local pkg="$@"
	for emergepkg in $pkg; do
		msg "Emerging '"$emergepkg"' package"
		cd "$TCREPO"/$emergepkg
		pkgmk -d -b -cf "$BUILD"/host-pkgmk.conf
		pkgadd "$PACKAGES"/$emergepkg#*.pkg.tar.lz4 --root "$TOOLS" -f
		rm -rf "$PACKAGES"/$emergepkg#*.pkg.tar.lz4
	done
}

pkginstallstage() {
	local pkg="$@"
	for emergepkg in $pkg; do
		msg "Installing '"$emergepkg"'"
		pkgadd "$PACKAGES"/$emergepkg#*.pkg.tar.lz4 --root "$STAGEFS"
	done
}

pkginstallinitrd() {
	local pkg="$@"
	for emergepkg in $pkg; do
		msg "Installing '"$emergepkg"'"
		pkgadd "$PACKAGES"/$emergepkg#*.pkg.tar.lz4 --root "$INITRAMFS"
	done
}

pkginstallimage() {
	local pkg="$@"
	for emergepkg in $pkg; do
		msg "Installing '"$emergepkg"'"
		pkgadd "$PACKAGES"/$emergepkg#*.pkg.tar.lz4 --root "$IMAGEFS"
	done
}

initdb() {
	local dir="$@"
	for dbindir in $dir; do
		mkdir -p "$dbindir"/var/lib/pkg
		touch "$dbindir"/var/lib/pkg/db
	done
}

rmpkg() {
	local rmpkg="$@"
	for rmpack in $rmpkg; do
		rm -rf "$PACKAGES"/$rmpack#*
	done
}

setup_architecture() {
	case $BARCH in
		x86_64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="x86_64-linux-musl"
			;;
		x86_64-amd)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="x86_64-amd-linux-musl"
			;;
		x86_64-intek)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="x86_64-intel-linux-musl"
			;;
		i686)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="i686-linux-musl"
			;;
		i586)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="i586-linux-musl"
			;;
		aarch64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="aarch64-linux-musl"
			;;
		armv7l)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="armv7l-linux-musleabihf"
			;;
		armv7l-neon)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="armv7l-neon-linux-musleabihf"
			;;
		armv5tel)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="armv5tel-linux-musleabi"
			;;
		mips)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="mips-linux-musl"
			;;
		mipsel)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="mipsel-linux-musl"
			;;
		ppc64le)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="powerpc64le-linux-musl"
			;;
		ppc64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="powerpc64-linux-musl"
			;;
		ppc)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="powerpc-linux-musl"
			;;
		riscv64)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="riscv64-linux-musl"
			;;
		riscv32)
			export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
			export XTARGET="riscv32-linux-musl"
			;;
		*)
			die "Architecture is not set or is not supported by 'bootstrap' script"
	esac
}

setup_environment() {
	msg "Setting up the build environment"

	export CWD="$(pwd)"
	export BUILD="$CWD/OUT.$BARCH"
	export SOURCES="$BUILD/sources"
	export PACKAGES="$BUILD/packages"
	export ROOTFS="$BUILD/rootfs"
	export TOOLS="$BUILD/tools"
	export STAGEFS="$BUILD/stage"
	export INITRAMFS="$BUILD/initramfs"
	export IMAGEFS="$BUILD/image"
	export ISOBUILD="$BUILD/iso"
	export KEEP="$CWD/KEEP"
	export REPO="$CWD/packages"
	export TCREPO="$CWD/toolchain"
	export BSPREPO="$CWD/bsp"
	export SCRIPTS="$CWD/scripts"

	export LC_ALL="POSIX"
	export PATH="$SCRIPTS:$TOOLS/bin:$PATH"
	export HOSTCC="gcc"
	export HOSTCXX="g++"

	if [ -z $MKJOBS ]; then
		export MKJOBS="$(expr $(nproc) + 1)"
	fi

	export MKOPTS="-j$MKJOBS"

	export CFLAGS="-D_FORTIFY_SOURCE=2 -Os -fomit-frame-pointer -fstack-protector-strong -Wl,-z,relro,-z,now -pipe"
	export CXXFLAGS="$CFLAGS"
}

build_environment() {
	msg "Building the build environment"

	rm -rf "$BUILD"
	mkdir -p "$BUILD" "$SOURCES" "$PACKAGES" "$ROOTFS" "$TOOLS" "$STAGEFS" "$INITRAMFS" "$IMAGEFS" "$ISOBUILD"

	initdb "$ROOTFS" "$TOOLS" "$STAGEFS" "$INITRAMFS" "$IMAGEFS"

cat << CEOF > "$BUILD"/host-pkgmk.conf
export CROSS="yes"
export TOOL="yes"
export LC_ALL="$LC_ALL"
export CFLAGS="$CFLAGS"
export CXXFLAGS="$CXXFLAGS"
export MAKEFLAGS="$MKOPTS"
export XHOST="$XHOST"
export XTARGET="$XTARGET"
export HOSTCC="$HOSTCC"
export HOSTCXX="$HOSTCXX"
export PATH="$PATH"
export KEEP="$KEEP"
PKGMK_SOURCE_DIR="$SOURCES"
PKGMK_PACKAGE_DIR="$PACKAGES"
PKGMK_DOWNLOAD_PROG="curl"
PKGMK_CURL_OPTS="-k -O -C - -L"
# PKGMK_SOURCE_MIRRORS=()
# PKGMK_WORK_DIR="$PWD/work"
# PKGMK_DOWNLOAD="no"
# PKGMK_IGNORE_SIGNATURE="yes"
# PKGMK_IGNORE_MD5SUM="yes"
# PKGMK_IGNORE_FOOTPRINT="yes"
# PKGMK_IGNORE_NEW="no"
# PKGMK_NO_STRIP="no"
# PKGMK_WGET_OPTS=""
# PKGMK_COMPRESSION_MODE="lz4"
CEOF

cat << CEOF > "$BUILD"/target-pkgmk.conf
export CROSS="yes"
export LC_ALL="$LC_ALL"
export CFLAGS="$CFLAGS"
export CXXFLAGS="$CXXFLAGS"
export MAKEFLAGS="$MKOPTS"
export XHOST="$XHOST"
export XTARGET="$XTARGET"
export CROSS_COMPILE="$XTARGET-"
export CC="$XTARGET-gcc"
export CXX="$XTARGET-g++"
export AR="$XTARGET-ar"
export AS="$XTARGET-as"
export RANLIB="$XTARGET-ranlib"
export LD="$XTARGET-ld"
export STRIP="$XTARGET-strip"
export BUILDFLAGS="--build=$XHOST --host=$XTARGET"
export TOOLFLAGS="--build=$XHOST --host=$XTARGET --target=$XTARGET"
export PERLFLAGS="--target=$XTARGET"
export PKG_CONFIG_PATH="$ROOTFS/usr/lib/pkgconfig:$ROOTFS/usr/share/pkgconfig"
export PKG_CONFIG_SYSROOT_DIR="$ROOTFS"
export HOSTCC="$HOSTCC"
export HOSTCXX="$HOSTCXX"
export PATH="$PATH"
export KEEP="$KEEP"
PKGMK_SOURCE_DIR="$SOURCES"
PKGMK_PACKAGE_DIR="$PACKAGES"
PKGMK_DOWNLOAD_PROG="curl"
PKGMK_CURL_OPTS="-k -O -C - -L"
# PKGMK_SOURCE_MIRRORS=()
# PKGMK_WORK_DIR="$PWD/work"
# PKGMK_DOWNLOAD="no"
# PKGMK_IGNORE_SIGNATURE="yes"
# PKGMK_IGNORE_MD5SUM="yes"
# PKGMK_IGNORE_FOOTPRINT="yes"
# PKGMK_IGNORE_NEW="no"
# PKGMK_NO_STRIP="no"
# PKGMK_WGET_OPTS=""
# PKGMK_COMPRESSION_MODE="lz4"
CEOF
}

build_toolchain() {
	msg "Building cross-toolchain for '"$BARCH"' platform"

	pkginstalltwo base-files
	pkghostinstall file
	pkghostinstall pkgconf
	pkghostinstall gettext-tiny
	pkghostinstall m4
	pkghostinstall bison
	pkghostinstall flex
	pkghostinstall bc
	pkghostinstall ncurses
	pkghostinstall gperf
	pkginstalltwo linux-api-headers
	pkginstalltwo fortify-headers
	pkghostinstall binutils
	pkghostinstall gcc-static
	pkginstall musl
	pkghostinstall gcc

	msg "Cleaning up"
	find "$TOOLS" -name "*.la" -print0 | xargs -0 rm -rf
	find "$TOOLS" -name "*.pod" -print0 | xargs -0 rm -rf
	find "$TOOLS" -name ".packlist" -print0 | xargs -0 rm -rf
}

build_target() {
	msg "Building target rootfs for '"$BARCH"' platform"

	for target in musl-tools zlib file ncurses libedit m4 bison flex bc \
			gmp mpfr mpc binutils gcc ccache bzip2 pkgconf attr acl libcap \
			shadow sed psmisc pcre grep bash loksh which slibtool gdbm db gperf expat \
			inetutils net-tools libressl perl autoconf automake xz lzip lz4 zstd \
			libarchive pkgutils kmod gettext-tiny musl-fts libuargp libelf coreutils diffutils \
			dialog onetrueawk findutils less zutils pigz libmnl libnftnl libnfnetlink \
			libnetfilter_conntrack libnl libpcap iptables iproute2 kbd make patch \
			tar cpio vim-tiny runit libcap-ng procps-ng util-linux \
			hwids eudev sdhcp; do
		pkginstall $target
	done
}

build_stage() {
	msg "Installing core stage packages in temporary filesystem for '"$BARCH"' platform"

	initdb "$STAGEFS"

	for target in base-files linux-api-headers fortify-headers musl musl-tools \
			zlib file ncurses libedit m4 bison flex bc \
			gmp mpfr mpc binutils gcc ccache bzip2 pkgconf attr acl libcap \
			shadow sed psmisc pcre grep bash loksh which slibtool gdbm db gperf expat \
			inetutils net-tools libressl perl autoconf automake xz lzip lz4 zstd \
			libarchive pkgutils kmod gettext-tiny musl-fts libuargp libelf coreutils diffutils \
			dialog onetrueawk findutils less zutils pigz libmnl libnftnl libnfnetlink \
			libnetfilter_conntrack libnl libpcap iptables iproute2 kbd make patch \
			tar cpio vim-tiny runit libcap-ng procps-ng util-linux \
			hwids eudev sdhcp; do
		pkginstallstage $target
	done

	msg "Building stage archive for '"$BARCH"' platform"
	cd "$STAGEFS"
	tar -cJf "$CWD"/januslinux-$RELEASE-$BARCH.tar.xz .
	cd $CWD
}

COMMAND="$1"
STAGE="$2"
PACKAGE="${@:2}"

case "$COMMAND" in
	stage)
		case $STAGE in
		0)
			check_for_root
			setup_architecture
			setup_environment
			build_environment
			build_toolchain
			;;
		0a)
			check_for_root
			setup_architecture
			setup_environment
			build_toolchain
			;;
		1)
			check_for_root
			setup_architecture
			setup_environment
			build_environment
			build_toolchain
			build_target
			;;
		1a)
			check_for_root
			setup_architecture
			setup_environment
			build_target
			;;
		2)
			check_for_root
			setup_architecture
			setup_environment
			build_stage
			case $BARCH in
				x86_64|x86_64-amd|x86_64-intel|i686|i586|ppc64le|ppc64|ppc)
					#build_grub_iso
					;;
				riscv64|riscv32)
					#build_riscv_hdd
					;;
			esac
			;;
		*)
			die "Stage number was not selected or is not supported"
		esac
		;;
	emerge)
		check_for_root
		setup_architecture
		setup_environment
		for myemerge in "$PACKAGE"; do
			pkginstall "$myemerge"
		done
		;;
	emergebsp)
		check_for_root
		setup_architecture
		setup_environment
		for myemerge in "$PACKAGE"; do
			pkgbspinstall "$myemerge"
		done
		;;
	usage|*)
		msg "In development!"
esac

exit 0
