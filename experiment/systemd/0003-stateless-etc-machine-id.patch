From 5c4a43bfa24a8db591feb21ddbbdee03355940e2 Mon Sep 17 00:00:00 2001
From: Ishimoto Shinobu <nagakamira@gmail.com>
Date: Thu, 20 Aug 2020 22:45:48 +0500
Subject: [PATCH 1/2] stateless /etc/machine-id

Signed-off-by: Ishimoto Shinobu <nagakamira@gmail.com>
---
 man/systemd-machine-id-commit.service.xml    | 10 +++++-----
 src/core/machine-id-setup.c                  | 14 +++++++-------
 src/core/main.c                              |  4 ++--
 src/firstboot/firstboot.c                    |  2 +-
 src/journal/test-journal-interleaving.c      |  4 ++--
 src/journal/test-journal-stream.c            |  4 ++--
 src/journal/test-journal-verify.c            |  4 ++--
 src/journal/test-journal.c                   |  4 ++--
 src/libsystemd/sd-id128/sd-id128.c           |  2 +-
 src/machine-id-setup/machine-id-setup-main.c |  4 ++--
 src/nspawn/nspawn.c                          |  6 +++---
 src/partition/repart.c                       |  4 ++--
 src/shared/dissect-image.c                   | 12 ++++++------
 src/shared/machine-image.c                   |  4 ++--
 src/test/test-fs-util.c                      |  2 +-
 test/test-execute/exec-specifier.service     |  2 +-
 test/test-execute/exec-specifier@.service    |  2 +-
 units/systemd-machine-id-commit.service      |  2 +-
 18 files changed, 43 insertions(+), 43 deletions(-)

diff --git a/man/systemd-machine-id-commit.service.xml b/man/systemd-machine-id-commit.service.xml
index 781a984..df80c61 100644
--- a/man/systemd-machine-id-commit.service.xml
+++ b/man/systemd-machine-id-commit.service.xml
@@ -33,29 +33,29 @@
 
     <para><filename>systemd-machine-id-commit.service</filename> is an
     early boot service responsible for committing transient
-    <filename>/etc/machine-id</filename> files to a writable disk file
+    <filename>/run/machine-id</filename> files to a writable disk file
     system. See
     <citerefentry><refentrytitle>machine-id</refentrytitle><manvolnum>5</manvolnum></citerefentry>
     for more information about machine IDs.</para>
 
     <para>This service is started after
     <filename>local-fs.target</filename> in case
-    <filename>/etc/machine-id</filename> is a mount point of its own
+    <filename>/run/machine-id</filename> is a mount point of its own
     (usually from a memory file system such as
     <literal>tmpfs</literal>) and /etc is writable. The service will
     invoke <command>systemd-machine-id-setup --commit</command>, which
     writes the current transient machine ID to disk and unmount the
-    <filename>/etc/machine-id</filename> file in a race-free manner to
+    <filename>/run/machine-id</filename> file in a race-free manner to
     ensure that file is always valid and accessible for other
     processes. See
     <citerefentry><refentrytitle>systemd-machine-id-setup</refentrytitle><manvolnum>1</manvolnum></citerefentry>
     for details.</para>
 
     <para>The main use case of this service are systems where
-    <filename>/etc/machine-id</filename> is read-only and initially
+    <filename>/run/machine-id</filename> is read-only and initially
     not initialized. In this case, the system manager will generate a
     transient machine ID file on a memory file system, and mount it
-    over <filename>/etc/machine-id</filename>, during the early boot
+    over <filename>/run/machine-id</filename>, during the early boot
     phase. This service is then invoked in a later boot phase, as soon
     as <filename>/etc</filename> has been remounted writable and the
     ID may thus be committed to disk to make it permanent.</para>
diff --git a/src/core/machine-id-setup.c b/src/core/machine-id-setup.c
index f76b82a..bb0ec57 100644
--- a/src/core/machine-id-setup.c
+++ b/src/core/machine-id-setup.c
@@ -91,7 +91,7 @@ int machine_id_setup(const char *root, sd_id128_t machine_id, sd_id128_t *ret) {
         bool writable;
         int r;
 
-        etc_machine_id = prefix_roota(root, "/etc/machine-id");
+        etc_machine_id = prefix_roota(root, "/run/machine-id");
 
         RUN_WITH_UMASK(0000) {
                 /* We create this 0444, to indicate that this isn't really
@@ -108,11 +108,11 @@ int machine_id_setup(const char *root, sd_id128_t machine_id, sd_id128_t *ret) {
                         if (fd < 0) {
                                 if (old_errno == EROFS && errno == ENOENT)
                                         return log_error_errno(errno,
-                                                  "System cannot boot: Missing /etc/machine-id and /etc is mounted read-only.\n"
+                                                  "System cannot boot: Missing /run/machine-id and /etc is mounted read-only.\n"
                                                   "Booting up is supported only when:\n"
-                                                  "1) /etc/machine-id exists and is populated.\n"
-                                                  "2) /etc/machine-id exists and is empty.\n"
-                                                  "3) /etc/machine-id is missing and /etc is writable.\n");
+                                                  "1) /run/machine-id exists and is populated.\n"
+                                                  "2) /run/machine-id exists and is empty.\n"
+                                                  "3) /run/machine-id is missing and /etc is writable.\n");
                                 else
                                         return log_error_errno(errno, "Cannot open %s: %m", etc_machine_id);
                         }
@@ -184,11 +184,11 @@ int machine_id_commit(const char *root) {
         sd_id128_t id;
         int r;
 
-        /* Replaces a tmpfs bind mount of /etc/machine-id by a proper file, atomically. For this, the umount is removed
+        /* Replaces a tmpfs bind mount of /run/machine-id by a proper file, atomically. For this, the umount is removed
          * in a mount namespace, a new file is created at the right place. Afterwards the mount is also removed in the
          * original mount namespace, thus revealing the file that was just created. */
 
-        etc_machine_id = prefix_roota(root, "/etc/machine-id");
+        etc_machine_id = prefix_roota(root, "/run/machine-id");
 
         r = path_is_mount_point(etc_machine_id, NULL, 0);
         if (r < 0)
diff --git a/src/core/main.c b/src/core/main.c
index 4a37697..a7a3be2 100644
--- a/src/core/main.c
+++ b/src/core/main.c
@@ -2003,12 +2003,12 @@ static void log_execution_mode(bool *ret_first_boot) {
                         log_info("Running in initial RAM disk.");
                 } else {
                         /* Let's check whether we are in first boot, i.e. whether /etc is still unpopulated. We use
-                         * /etc/machine-id as flag file, for this: if it exists we assume /etc is populated, if it
+                         * /run/machine-id as flag file, for this: if it exists we assume /etc is populated, if it
                          * doesn't it's unpopulated. This allows container managers and installers to provision a
                          * couple of files already. If the container manager wants to provision the machine ID itself
                          * it should pass $container_uuid to PID 1. */
 
-                        *ret_first_boot = access("/etc/machine-id", F_OK) < 0;
+                        *ret_first_boot = access("/run/machine-id", F_OK) < 0;
                         if (*ret_first_boot)
                                 log_info("Running with unpopulated /etc.");
                 }
diff --git a/src/firstboot/firstboot.c b/src/firstboot/firstboot.c
index a3f4425..83e4522 100644
--- a/src/firstboot/firstboot.c
+++ b/src/firstboot/firstboot.c
@@ -537,7 +537,7 @@ static int process_machine_id(void) {
         char id[SD_ID128_STRING_MAX];
         int r;
 
-        etc_machine_id = prefix_roota(arg_root, "/etc/machine-id");
+        etc_machine_id = prefix_roota(arg_root, "/run/machine-id");
         if (laccess(etc_machine_id, F_OK) >= 0 && !arg_force)
                 return 0;
 
diff --git a/src/journal/test-journal-interleaving.c b/src/journal/test-journal-interleaving.c
index c0bda68..ae986dd 100644
--- a/src/journal/test-journal-interleaving.c
+++ b/src/journal/test-journal-interleaving.c
@@ -282,8 +282,8 @@ int main(int argc, char *argv[]) {
         test_setup_logging(LOG_DEBUG);
 
         /* journal_file_open requires a valid machine id */
-        if (access("/etc/machine-id", F_OK) != 0)
-                return log_tests_skipped("/etc/machine-id not found");
+        if (access("/run/machine-id", F_OK) != 0)
+                return log_tests_skipped("/run/machine-id not found");
 
         arg_keep = argc > 1;
 
diff --git a/src/journal/test-journal-stream.c b/src/journal/test-journal-stream.c
index 50aab11..559feae 100644
--- a/src/journal/test-journal-stream.c
+++ b/src/journal/test-journal-stream.c
@@ -176,8 +176,8 @@ static void run_test(void) {
 int main(int argc, char *argv[]) {
 
         /* journal_file_open requires a valid machine id */
-        if (access("/etc/machine-id", F_OK) != 0)
-                return log_tests_skipped("/etc/machine-id not found");
+        if (access("/run/machine-id", F_OK) != 0)
+                return log_tests_skipped("/run/machine-id not found");
 
         test_setup_logging(LOG_DEBUG);
 
diff --git a/src/journal/test-journal-verify.c b/src/journal/test-journal-verify.c
index 2893a7c..4a48090 100644
--- a/src/journal/test-journal-verify.c
+++ b/src/journal/test-journal-verify.c
@@ -64,8 +64,8 @@ int main(int argc, char *argv[]) {
         uint64_t p;
 
         /* journal_file_open requires a valid machine id */
-        if (access("/etc/machine-id", F_OK) != 0)
-                return log_tests_skipped("/etc/machine-id not found");
+        if (access("/run/machine-id", F_OK) != 0)
+                return log_tests_skipped("/run/machine-id not found");
 
         test_setup_logging(LOG_DEBUG);
 
diff --git a/src/journal/test-journal.c b/src/journal/test-journal.c
index 5850bb8..3691150 100644
--- a/src/journal/test-journal.c
+++ b/src/journal/test-journal.c
@@ -246,8 +246,8 @@ int main(int argc, char *argv[]) {
         test_setup_logging(LOG_INFO);
 
         /* journal_file_open requires a valid machine id */
-        if (access("/etc/machine-id", F_OK) != 0)
-                return log_tests_skipped("/etc/machine-id not found");
+        if (access("/run/machine-id", F_OK) != 0)
+                return log_tests_skipped("/run/machine-id not found");
 
         test_non_empty();
         test_empty();
diff --git a/src/libsystemd/sd-id128/sd-id128.c b/src/libsystemd/sd-id128/sd-id128.c
index 9b38ef0..54c4188 100644
--- a/src/libsystemd/sd-id128/sd-id128.c
+++ b/src/libsystemd/sd-id128/sd-id128.c
@@ -88,7 +88,7 @@ _public_ int sd_id128_get_machine(sd_id128_t *ret) {
         assert_return(ret, -EINVAL);
 
         if (sd_id128_is_null(saved_machine_id)) {
-                r = id128_read("/etc/machine-id", ID128_PLAIN, &saved_machine_id);
+                r = id128_read("/run/machine-id", ID128_PLAIN, &saved_machine_id);
                 if (r < 0)
                         return r;
 
diff --git a/src/machine-id-setup/machine-id-setup-main.c b/src/machine-id-setup/machine-id-setup-main.c
index 872b00c..f7a8c78 100644
--- a/src/machine-id-setup/machine-id-setup-main.c
+++ b/src/machine-id-setup/machine-id-setup-main.c
@@ -29,7 +29,7 @@ static int help(void) {
                 return log_oom();
 
         printf("%s [OPTIONS...]\n\n"
-               "Initialize /etc/machine-id from a random source.\n\n"
+               "Initialize /run/machine-id from a random source.\n\n"
                "  -h --help             Show this help\n"
                "     --version          Show package version\n"
                "     --root=ROOT        Filesystem root\n"
@@ -123,7 +123,7 @@ static int run(int argc, char *argv[]) {
                 if (r < 0)
                         return r;
 
-                etc_machine_id = prefix_roota(arg_root, "/etc/machine-id");
+                etc_machine_id = prefix_roota(arg_root, "/run/machine-id");
                 r = id128_read(etc_machine_id, ID128_PLAIN, &id);
                 if (r < 0)
                         return log_error_errno(r, "Failed to read machine ID back: %m");
diff --git a/src/nspawn/nspawn.c b/src/nspawn/nspawn.c
index eb7c332..0a7456f 100644
--- a/src/nspawn/nspawn.c
+++ b/src/nspawn/nspawn.c
@@ -2550,12 +2550,12 @@ static int setup_machine_id(const char *directory) {
 
         /* If the UUID in the container is already set, then that's what counts, and we use. If it isn't set, and the
          * caller passed --uuid=, then we'll pass it in the $container_uuid env var to PID 1 of the container. The
-         * assumption is that PID 1 will then write it to /etc/machine-id to make it persistent. If --uuid= is not
-         * passed we generate a random UUID, and pass it via $container_uuid. In effect this means that /etc/machine-id
+         * assumption is that PID 1 will then write it to /run/machine-id to make it persistent. If --uuid= is not
+         * passed we generate a random UUID, and pass it via $container_uuid. In effect this means that /run/machine-id
          * in the container and our idea of the container UUID will always be in sync (at least if PID 1 in the
          * container behaves nicely). */
 
-        etc_machine_id = prefix_roota(directory, "/etc/machine-id");
+        etc_machine_id = prefix_roota(directory, "/run/machine-id");
 
         r = id128_read(etc_machine_id, ID128_PLAIN, &id);
         if (r < 0) {
diff --git a/src/partition/repart.c b/src/partition/repart.c
index 2e5f5d1..55306c8 100644
--- a/src/partition/repart.c
+++ b/src/partition/repart.c
@@ -2211,7 +2211,7 @@ static int partition_acquire_uuid(Context *context, Partition *p, sd_id128_t *re
          * time. Or in other words:
          *
          * With:
-         *     SEED := /etc/machine-id
+         *     SEED := /run/machine-id
          *
          * If first partition instance of type TYPE_UUID:
          *     PARTITION_UUID := HMAC-SHA256(SEED, TYPE_UUID)
@@ -2610,7 +2610,7 @@ static int context_read_seed(Context *context, const char *root) {
         if (!arg_randomize) {
                 _cleanup_close_ int fd = -1;
 
-                fd = chase_symlinks_and_open("/etc/machine-id", root, CHASE_PREFIX_ROOT, O_RDONLY|O_CLOEXEC, NULL);
+                fd = chase_symlinks_and_open("/run/machine-id", root, CHASE_PREFIX_ROOT, O_RDONLY|O_CLOEXEC, NULL);
                 if (fd == -ENOENT)
                         log_info("No machine ID set, using randomized partition UUIDs.");
                 else if (fd < 0)
diff --git a/src/shared/dissect-image.c b/src/shared/dissect-image.c
index 24be6de..bac03f1 100644
--- a/src/shared/dissect-image.c
+++ b/src/shared/dissect-image.c
@@ -673,7 +673,7 @@ int dissect_image(
                                          * ID. Why? Unlike the other partitions /var is inherently
                                          * installation specific, hence we need to be careful not to mount it
                                          * in the wrong installation. By hashing the partition UUID from
-                                         * /etc/machine-id we can securely bind the partition to the
+                                         * /run/machine-id we can securely bind the partition to the
                                          * installation. */
 
                                         r = sd_id128_get_machine_app_specific(GPT_VAR, &var_uuid);
@@ -1676,7 +1676,7 @@ int dissected_image_acquire_metadata(DissectedImage *m) {
 
         static const char *const paths[_META_MAX] = {
                 [META_HOSTNAME]     = "/etc/hostname\0",
-                [META_MACHINE_ID]   = "/etc/machine-id\0",
+                [META_MACHINE_ID]   = "/run/machine-id\0",
                 [META_MACHINE_INFO] = "/etc/machine-info\0",
                 [META_OS_RELEASE]   = "/etc/os-release\0"
                                       "/usr/lib/os-release\0",
@@ -1765,15 +1765,15 @@ int dissected_image_acquire_metadata(DissectedImage *m) {
 
                         r = read_line(f, LONG_LINE_MAX, &line);
                         if (r < 0)
-                                log_debug_errno(r, "Failed to read /etc/machine-id: %m");
+                                log_debug_errno(r, "Failed to read /run/machine-id: %m");
                         else if (r == 33) {
                                 r = sd_id128_from_string(line, &machine_id);
                                 if (r < 0)
-                                        log_debug_errno(r, "Image contains invalid /etc/machine-id: %s", line);
+                                        log_debug_errno(r, "Image contains invalid /run/machine-id: %s", line);
                         } else if (r == 0)
-                                log_debug("/etc/machine-id file is empty.");
+                                log_debug("/run/machine-id file is empty.");
                         else
-                                log_debug("/etc/machine-id has unexpected length %i.", r);
+                                log_debug("/run/machine-id has unexpected length %i.", r);
 
                         break;
                 }
diff --git a/src/shared/machine-image.c b/src/shared/machine-image.c
index 1b7cfb5..e2898c7 100644
--- a/src/shared/machine-image.c
+++ b/src/shared/machine-image.c
@@ -1123,9 +1123,9 @@ int image_read_metadata(Image *i) {
 
                 path = mfree(path);
 
-                r = chase_symlinks("/etc/machine-id", i->path, CHASE_PREFIX_ROOT|CHASE_TRAIL_SLASH, &path, NULL);
+                r = chase_symlinks("/run/machine-id", i->path, CHASE_PREFIX_ROOT|CHASE_TRAIL_SLASH, &path, NULL);
                 if (r < 0 && r != -ENOENT)
-                        log_debug_errno(r, "Failed to chase /etc/machine-id in image %s: %m", i->name);
+                        log_debug_errno(r, "Failed to chase /run/machine-id in image %s: %m", i->name);
                 else if (r >= 0) {
                         _cleanup_close_ int fd = -1;
 
diff --git a/src/test/test-fs-util.c b/src/test/test-fs-util.c
index 1ea845d..e419a0b 100644
--- a/src/test/test-fs-util.c
+++ b/src/test/test-fs-util.c
@@ -211,7 +211,7 @@ static void test_chase_symlinks(void) {
         assert_se(streq(result, "/test-chase.fsldajfl"));
         result = mfree(result);
 
-        r = chase_symlinks("/etc/machine-id/foo", NULL, 0, &result, NULL);
+        r = chase_symlinks("/run/machine-id/foo", NULL, 0, &result, NULL);
         assert_se(r == -ENOTDIR);
         result = mfree(result);
 
diff --git a/test/test-execute/exec-specifier.service b/test/test-execute/exec-specifier.service
index a58abc6..39c9e46 100644
--- a/test/test-execute/exec-specifier.service
+++ b/test/test-execute/exec-specifier.service
@@ -25,7 +25,7 @@ ExecStart=sh -c 'test %g = $$(id -gn)'
 ExecStart=sh -c 'test %G = $$(id -g)'
 ExecStart=test %h = /root
 ExecStart=sh -c 'test %s = /bin/sh'
-ExecStart=sh -c 'test %m = $$(cat /etc/machine-id)'
+ExecStart=sh -c 'test %m = $$(cat /run/machine-id)'
 ExecStart=sh -c 'test %b = $$(cat /proc/sys/kernel/random/boot_id | sed -e 's/-//g')'
 ExecStart=sh -c 'test %H = $$(uname -n)'
 ExecStart=sh -c 'test %v = $$(uname -r)'
diff --git a/test/test-execute/exec-specifier@.service b/test/test-execute/exec-specifier@.service
index faecbf3..ad94121 100644
--- a/test/test-execute/exec-specifier@.service
+++ b/test/test-execute/exec-specifier@.service
@@ -23,7 +23,7 @@ ExecStart=sh -c 'test %g = $$(id -gn)'
 ExecStart=sh -c 'test %G = $$(id -g)'
 ExecStart=test %h = /root
 ExecStart=sh -c 'test %s = /bin/sh'
-ExecStart=sh -c 'test %m = $$(cat /etc/machine-id)'
+ExecStart=sh -c 'test %m = $$(cat /run/machine-id)'
 ExecStart=sh -c 'test %b = $$(cat /proc/sys/kernel/random/boot_id | sed -e 's/-//g')'
 ExecStart=sh -c 'test %H = $$(uname -n)'
 ExecStart=sh -c 'test %v = $$(uname -r)'
diff --git a/units/systemd-machine-id-commit.service b/units/systemd-machine-id-commit.service
index e3acb0f..0828ec2 100644
--- a/units/systemd-machine-id-commit.service
+++ b/units/systemd-machine-id-commit.service
@@ -15,7 +15,7 @@ Conflicts=shutdown.target
 Before=sysinit.target shutdown.target
 After=local-fs.target
 ConditionPathIsReadWrite=/etc
-ConditionPathIsMountPoint=/etc/machine-id
+ConditionPathIsMountPoint=/run/machine-id
 
 [Service]
 Type=oneshot
-- 
2.18.4

