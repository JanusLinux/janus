name=host-llvm
realpath="$REPO/llvm"
version="$(grep ^version $realpath/KagamiBuild | sed -e 's/version=//g')"
release=1
options=('bootstrap')
source=("https://github.com/llvm/llvm-project/releases/download/llvmorg-$version/llvm-$version.src.tar.xz"
	"https://github.com/llvm/llvm-project/releases/download/llvmorg-$version/clang-$version.src.tar.xz"
	"https://github.com/llvm/llvm-project/releases/download/llvmorg-$version/clang-tools-extra-$version.src.tar.xz"
	"https://github.com/llvm/llvm-project/releases/download/llvmorg-$version/lld-$version.src.tar.xz"
	"https://github.com/llvm/llvm-project/releases/download/llvmorg-$version/compiler-rt-$version.src.tar.xz"
	"https://github.com/llvm/llvm-project/releases/download/llvmorg-$version/libunwind-$version.src.tar.xz"
	"https://github.com/llvm/llvm-project/releases/download/llvmorg-$version/libcxx-$version.src.tar.xz"
	"https://github.com/llvm/llvm-project/releases/download/llvmorg-$version/libcxxabi-$version.src.tar.xz")

build() {
	local clang LARCH LTARGET i

	case "$BARCH" in
		x86_64) LARCH="x86_64"; LTARGET="X86" ;;
		x86) LARCH="i686"; LTARGET="X86" ;;
		arm64) LARCH="aarch64"; LTARGET="AArch64" ;;
		arm) LARCH="armv7"; LTARGET="ARM" ;;
		powerpc64le) LARCH="powerpc64le"; LTARGET="PowerPC" ;;
		powerpc64) LARCH="powerpc64"; LTARGET="PowerPC" ;;
		powerpc) LARCH="powerpc"; LTARGET="PowerPC" ;;
		powerpcspe) LARCH="powerpcspe"; LTARGET="PowerPC" ;;
		riscv64) LARCH="riscv64"; LTARGET="RISCV" ;;
		*) die 'Architecture called `'${BARCH}'` is not supported by Ataraxia GNU/Linux' ;;
	esac

	pushd "$SRC/llvm-$version.src"
		msg "Patching LLVM"
		patch -Np1 -i "$STUFF"/llvm/0001-PowerPC-use-ELFv2-ABI.patch
	popd
	pushd "$SRC/clang-$version.src"
		msg "Patching Clang"
		patch -Np1 -i "$STUFF"/clang/0001-add-support-for-Ataraxia-GNU-Linux.patch
		patch -Np1 -i "$STUFF"/clang/0002-PowerPC-use-ELFv2-ABI.patch
		patch -Np1 -i "$STUFF"/clang/0003-RISCV-disable-relaxations.patch
		patch -Np1 -i "$STUFF"/clang/0004-add-support-for-external-libssp.patch
		patch -Np1 -i "$STUFF"/clang/0005-move-dynamic-linker-in-usr-lib.patch
	popd
	pushd "$SRC/clang-tools-extra-$version.src"
		msg "Patching Clang Tools Extra"
		patch -Np1 -i "$STUFF"/clang-tools-extra/0001-PATCH-clang-tools-extra-Make-clangd-CompletionModel-.patch
	popd
	pushd "$SRC/lld-$version.src"
		msg "Patching LLD"
		patch -Np1 -i "$STUFF"/lld/0001-ELF-use-SHA1-by-default.patch
		patch -Np1 -i "$STUFF"/lld/0002-PATCH-lld-Import-compact_unwind_encoding.h-from-libu.patch
	popd
	pushd "$SRC/compiler-rt-$version.src"
		msg "Patching Compiler-RT"
		patch -Np1 -i "$STUFF"/compiler-rt/0001-adjust-musl-syscalls.patch
		patch -Np1 -i "$STUFF"/compiler-rt/0002-adjust-syscalls-for-i386.patch
		patch -Np1 -i "$STUFF"/compiler-rt/0003-remove-ucontext-on-aarch64.patch
	popd
	pushd "$SRC/libcxxabi-$version.src"
		msg "Patching libc++abi"
		patch -Np1 -i "$STUFF"/libcxxabi/0001-don-t-link-against-__cxa_thread_atexit_impl.patch
		patch -Np1 -i "$STUFF"/libcxxabi/0002-force-link-against-compiler-rt-builtins.patch
	popd
	pushd "$SRC/libcxx-$version.src"
		msg "Patching libc++"
		patch -Np1 -i "$STUFF"/libcxx/0001-fix-musl-locale.patch
		patch -Np1 -i "$STUFF"/libcxx/0002-force-link-against-compiler-rt-builtins.patch
	popd

	msg "Compiling LLVM cross compiler for $BARCH"
	cd "$SRC/llvm-$version.src"
	cp -a "$SRC"/clang-$version.src tools/clang
	cp -a "$SRC"/clang-tools-extra-$version.src tools/clang/tools/extra
	cp -a "$SRC"/lld-$version.src tools/lld
	cp -a "$SRC"/compiler-rt-$version.src projects/compiler-rt
	cp -a "$SRC"/libunwind-$version.src projects/libunwind
	cp -a "$SRC"/libcxx-$version.src projects/libcxx
	cp -a "$SRC"/libcxxabi-$version.src projects/libcxxabi

	mkdir -p build
	cd build

	cmake "$SRC/llvm-$version.src" \
		-DCMAKE_C_COMPILER="$HOSTCC" \
		-DCMAKE_CXX_COMPILER="$HOSCCXX" \
		-DCMAKE_INSTALL_PREFIX="$TOOLS" \
		-DCMAKE_BUILD_TYPE=MinSizeRel \
		-DCLANG_BUILD_EXAMPLES=OFF \
		-DCLANG_DEFAULT_CXX_STDLIB=libc++ \
		-DCLANG_DEFAULT_LINKER=lld \
		-DCLANG_DEFAULT_OPENMP_RUNTIME=libomp \
		-DCLANG_DEFAULT_RTLIB=compiler-rt \
		-DCLANG_DEFAULT_UNWINDLIB=libunwind \
		-DCLANG_INCLUDE_DOCS=OFF \
		-DCLANG_INCLUDE_TESTS=OFF \
		-DCLANG_PLUGIN_SUPPORT=ON \
		-DCLANG_VENDOR=Ataraxia \
		-DCOMPILER_RT_BUILD_LIBFUZZER=OFF \
		-DCOMPILER_RT_DEFAULT_TARGET_TRIPLE="$XHOST" \
		-DLLVM_EXTERNAL_CLANG_TOOLS_EXTRA_SOURCE_DIR="$SRC/clang-tools-extra-$version.src" \
		-DLIBCXX_CXX_ABI=libcxxabi \
		-DLIBCXX_USE_COMPILER_RT=ON \
		-DLIBCXXABI_USE_LLVM_UNWINDER=ON \
		-DLIBCXXABI_USE_COMPILER_RT=ON \
		-DLIBUNWIND_USE_COMPILER_RT=ON \
		-DENABLE_LINKER_BUILD_ID=ON \
		-DLLVM_BUILD_EXAMPLES=OFF \
		-DLLVM_BUILD_DOCS=OFF \
		-DLLVM_BUILD_TESTS=OFF \
		-DLLVM_ENABLE_DOXYGEN=OFF \
		-DLLVM_ENABLE_SPHINX=OFF \
		-DLLVM_DEFAULT_TARGET_TRIPLE=$XTARGET \
		-DLLVM_TARGET_ARCH=$LARCH \
		-DLLVM_TARGETS_TO_BUILD=$LTARGET \
		-DDEFAULT_SYSROOT="$ROOTFS" \
		-Wno-dev -G Ninja
	samu
	samu install

	attr -q -s pax.flags -V "em" "$TOOLS"/bin/lli

	msg "Configuring LLVM cross-compiler"
	clang="$(readlink $TOOLS/bin/clang)"

	pushd "$TOOLS/bin"
		for i in cc c++ clang clang++ cpp; do
			cp $clang $XTARGET-$i
		done

		cp lld $XTARGET-ld
		cp lld $XTARGET-ld.lld
		cp llvm-ar $XTARGET-ar
		cp llvm-dwp $XTARGET-dwp
		cp llvm-cov $XTARGET-gcov
		cp llvm-nm $XTARGET-nm
		cp llvm-objdump $XTARGET-objdump
		cp llvm-ar $XTARGET-ranlib

		rm -f $clang clang clang++ clang-cl clang-cpp lld-link ld.lld ld64.lld ld64.lld.darwinnew wasm-ld lld
	popd
}
